{"title":"Hands-on Exercise 6","markdown":{"yaml":{"title":"Hands-on Exercise 6","subtitle":"Global/Local Measures of Spatial Autocorrelation","author":"Kai Feng","date":"Sept 20, 2024","date-modified":"last-modified","execute":{"eval":true,"echo":true,"freeze":true}},"headingText":"1.0 Overview","containsRefs":false,"markdown":"\n\n\n-   **Objective of spatial policy**: Ensure equal distribution of development in the province.\n\n-   **Study Purpose**: Use spatial statistics to check for even distribution of development.\n\n-   **If Not Even**:\n\n    -   Investigate signs of spatial clustering (areas where development is grouped).\n\n    -   Identify where these clusters are located.\n\n-   **Focus**: Analyze the spatial pattern of GDP per capita in Hunan Province, China.\n\n<br/><br/>\n\n## **2.0 Setup**\n\n### **2.1 Installing R-Packages**\n\n-   **sf**: Importing and handling geospatial data in R\n\n-   **spdep**: Compute spatial weights, global and local spatial autocorrelation statistics\n\n-   **tmap**: Trepare cartographic quality chropleth map\n\n-   **tidyverse**: For wrangling attribute data in R\n\n```{r}\npacman::p_load(sf, spdep, tmap, tidyverse)\n```\n\n<br/><br/>\n\n### **2.2 Data Acquisition**\n\nTwo data sets will be used:\n\n-   `Hunan county boundary layer`: a geospatial data set in ESRI shapefile format.\n\n-   `Hunan_2012.csv`: contains selected Hunan’s local development indicators in 2012.\n\n::: panel-tabset\n# **Importing Geospatial Data**\n\n```{r}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n# Importing Aspatial Data\n\n```{r}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n### **2.3 Performing relational join**\n\n```{r}\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n```\n\n### 2.4 Visualising Regional Development Indicator\n\n```{r}\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n## 3.0 **Global Measures of Spatial Autocorrelation**\n\n::: panel-tabset\n## Step 1: Computing Contiguity Spatial Weights\n\nBefore we can compute the Global Spatial autocorrelation statistics, we need to:\n\n-   Construct spatial weights for the study area.\n\n    -   By Computing contiguity weight matrices based on adjacent regions.\n    -   **using Queen Criteria**:\n        -   Default is **TRUE**: Includes all neighbors that touch at edges or corners.\n\n        -   You can set `queen = FALSE` to consider only edge-touching neighbors (first-order neighbors).\n\n-   So we can Define neighborhood relationships between geographical units (e.g., counties).\n\n```{r}\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n```\n\n::: callout-note\nThere are 88 area units in Hunan.\n\nThe most connected area unit has 11 neighbours\n\nOnly 2 area aunits with 1 link\n:::\n\n## Step 2: Row-standardised weights matrix\n\nNow, assign weights to each neighboring polygon.\n\n-   **Method**: Assign each using equal weights (style = \"W\")\n\n-   **Weight Calculation**:\n\n    -   Assign weight of fraction 1/(#ofneighbors) to each neighboring county\n\n    -   Sum the weighted values (e.g., income) from neighbors.\n\n-   **Drawback**:\n\n    -   Edge polygons have fewer neighbors, which can skew results (over- or under-estimate spatial autocorrelation).\n\n-   **Note**: For this example, we'll use style = \"W\" for simplicity, but other options, like style = \"B,\" are more robust.\n\n```{r}\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n```\n\n::: callout-note\nThe function `nb2listw()` requires an object of class **nb** (neighborhood list).\n\n**style**: Defines how weights are calculated. Options include:\n\n-   **\"W\"**: Row standardized weights (sums to 1 across neighbors).\n\n-   **\"B\"**: Basic binary coding (weights are either 0 or 1).\n\n-   **\"C\"**: Globally standardized weights (sums to the total number of connections).\n\n-   **\"U\"**: Equal weights divided by the number of neighbors (sums to 1).\n\n-   **\"minmax\"**: Min-max normalization (scales weights between 0 and 1).\n\n-   **\"S\"**: Variance-stabilizing coding (improves stability of weights).\n\n**zero.poly**:\n\n-   If set to **TRUE**, this includes weights of zero for regions without neighbors.\n\n-   This results in lag values of zero for those regions, which means they won't affect the analysis.\n\n-   It uses a formula that generates a vector of zeros for regions without neighbors, leading to a spatially lagged value of zero for those regions.\n\n**Summary**\n\n-   The **style** argument determines how to handle the weights for neighboring regions.\n\n-   **zero.poly** allows for handling of regions that have no neighbors, potentially simplifying analysis but may not always be sensible.\n:::\n:::\n\n## 3.0 **Global Measures of Spatial Autocorrelation: Moran’s I**\n\n::: panel-tabset\n## Maron’s I test\n\n```{r}\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: callout-note\n## Findings\n\nMoran I statistic (0.300749970) -\\> indicate Positive correlation in GDP per capita\n\nSD of 4.7351 -\\> indicate Moran's I is \\> expected value under null hypo\n\nP-value of 1.095e-06 (0.000001095) -\\> is \\< 0.05, indicates strong statistical significance\n\nExpectation of -0.011494253 -\\> we expect slight negative autocorrelation if there were no spatial structure\n\nSince p-value \\< 0.05, we reject null hypo of no spatial autocorrelation. This strongly suggests there is significant positive spatial clustering of GDPPC in Hunan Province. (Regions with High GDPPC is near areas with high GDPPC\n:::\n\n## Computing Monte Carlo Moran’s I\n\n```{r}\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: callout-note\n## Findings\n\nMoran I statistic (0.30075) -\\> indicate Positive correlation in GDP per capita\n\nP-value of 0.001 -\\> \\< 0.05, indicates that the probability of obtaining a Moran's I value as extreme as the observed \\>= 1 under the null hypo\n\nThus, we reject null hypo as p value \\< 0.05. There is strong evidence that areas with high GDPPC are near areas with high GDPPC\n:::\n\n## Visualising Monte Carlo Moran’s I\n\n```{r}\nmean(bperm$res[1:999])\nvar(bperm$res[1:999])\nsummary(bperm$res[1:999])\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n## Plotting using ggplot2\n\n```{r}\n# Create a data frame from the simulated results\ndata <- data.frame(Simulated_Morans_I = bperm$res[1:999])\n\n# Plot using ggplot2\nggplot(data, aes(x = Simulated_Morans_I)) +\n  geom_histogram(binwidth = (max(data$Simulated_Morans_I) - min(data$Simulated_Morans_I)) / 20, \n                 fill = \"blue\", \n                 color = \"black\") +\n  geom_vline(xintercept = 0, \n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n:::\n\n## 3.0 **Global Measures of Spatial Autocorrelation: Geary’s C**\n\n::: panel-tabset\n### **Geary’s C test**\n\n```{r}\ngeary.test(hunan$GDPPC, listw=rswm_q)\n```\n\n::: callout-note\n## Findings\n\nGeary C statistic (0.6907223) -\\> indicate a level of spatial autocorrelation, lower value suggest positive spatial autocorrelation\n\nSD of 3.6108 -\\> indicates significant lower than expected value under null hypo\n\nP-value of 0.0001526 -\\> is \\< 0.05, indicates strong statistical significance\n\nExpectation of 1.0000000 -\\> on avg, we would expect no spatial autocorrelation\n\nSince p-value \\< 0.05, we reject null hypo of no spatial autocorrelation. This strongly suggests there is significant positive spatial clustering of GDPPC in Hunan Province. (Regions with High GDPPC is near areas with high GDPPC than would be expected by chance\n:::\n\n## Computing Monte Carlo **Geary’s C**\n\n```{r}\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n```\n\n::: callout-note\n## Findings\n\nGeary's C Statistic (0.69072) -\\> indicate some level of positive spatial autocorrelation\n\nObserved Rank of 1 -\\> indicates that the observed value is the smallest among all the simulated values. This suggests that the observed spatial autocorrelation is much stronger than what would be expected under the null hypothesis.\n\nP-value of 0.001 -\\> \\< 0.05, indicates strong statistical significance\n\nThus, we reject null hypo as p value \\< 0.05. There is strong evidence that areas with high GDPPC are near areas with high GDPPC\n:::\n\n## Visualising Monte Carlo **Geary’s C**\n\n```{r}\nmean(bperm$res[1:999])\nvar(bperm$res[1:999])\nsummary(bperm$res[1:999])\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n:::\n\n<br/><br/>\n\n## 4.0 **Spatial Correlogram**\n\n-   **Spatial Correlograms**: Useful for examining patterns of spatial autocorrelation.\n\n-   **Function**: Show how correlated pairs of spatial observations are as distance (lag) increases.\n\n-   **Plot Type**: Graphs of autocorrelation indices (like Moran’s I or Geary’s c) against distance.\n\n-   **Comparison with Variograms**:\n\n    -   Not as fundamental as variograms, which are key in geostatistics.\n\n    -   Provide richer information for exploratory and descriptive analysis than variograms.\n\n::: panel-tabset\n## Compute Moran’s I correlogram\n\n```{r}\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n```\n\n-   **Plot Limitations**:\n\n    -   Plots may not give a complete interpretation of autocorrelation results.\n\n    -   Not all autocorrelation values are statistically significant.\n\n-   **Importance of Full Analysis**:\n\n    -   Necessary to examine the complete analysis report.\n\n    -   Printing the analysis results provides more detailed insights.\n\n```{r}\nprint(MI_corr)\n```\n\n::: callout-note\n### Statistical Observations\n\n1.  **Positive Autocorrelation**:\n\n    -   The first three lags (1, 2, and 3) show positive Moran's I values (0.30075, 0.20601, and 0.06683), indicating clustering of similar GDP per capita values at these distances.\n\n2.  **Statistical Significance**:\n\n    -   **Lags 1 and 2**: Highly significant (p-values of **2.189e-06** and **2.029e-06**), suggesting strong evidence of positive spatial autocorrelation.\n\n    -   **Lag 3**: Also significant (p-value of **0.0404**), indicating some level of clustering, but less strong than the first two lags.\n\n    -   **Lag 4**: Not significant (p-value of **0.2260**), suggesting a lack of clustering at this distance.\n\n    -   **Lag 5 and 6**: Show negative values (-0.15305 and -0.11871) with significant p-values (**5.984e-05** and **0.008886**), indicating that at these distances, similar values are less clustered.\n\n3.  **General Trend**:\n\n    -   The trend shows strong positive autocorrelation at shorter distances (lags 1-3), but transitions to negative autocorrelation at longer distances (lags 5-6).\n\n### Conclusion:\n\n-   There is strong evidence of positive spatial clustering of GDP per capita in Hunan Province at shorter distances, but this pattern diminishes and even reverses at greater distances, suggesting that local clusters may dissipate as distance increases.\n:::\n\n## Compute Geary’s C correlogram and plot\n\n```{r}\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n```\n\n```{r}\nprint(GC_corr)\n```\n:::\n\n<br/><br/>\n\n## 5.0 **Local Measures of Spatial Autocorrelation (LMSA)**\n\n-   **Focus**: Examines relationships between each observation and its surrounding observations.\n\n<!-- -->\n\n-   **Nature**:\n\n    -   Not summary statistics; they provide individual scores for each location.\n\n    -   Helps understand the spatial structure of data.\n\n-   **Similarity to Global Measures**:\n\n    -   Intuition is similar to global statistics.\n\n    -   Some global measures can be broken down into local measures.\n\n-   **Key Examples**:\n\n    -   **Local Indicators of Spatial Association (LISA)**: Provides insights into local clustering and relationships.\n\n    -   **Getis-Ord’s Gi-statistics**: Another LMSA method that offers complementary insights for geographic data.\n\n### **5.1 Local Indicators of Spatial Association(LISA)**\n\n-   **Purpose**: Evaluate the presence of clusters and outliers in spatial data.\n\n-   **Example**: Analyzing GDP per capita in Hunan Province, China.\n\n    -   **Clusters**: Areas with significantly higher or lower GDP per capita than expected by chance.\n\n    -   **Interpretation**: Identifies counties with values above or below a random distribution.\n\n::: panel-tabset\n## Step 1: Computing Contiguity Spatial Weights\n\nSame as how we compute for Global Indicators of Spatial Autocorrelation\n\n```{r}\nsummary(wm_q)\n```\n\n## Step 2: Row-standardised weights matrix\n\nSame as how we compute for Global Indicators of Spatial Autocorrelation\n\n```{r}\nrswm_q\n```\n:::\n\n::: panel-tabset\n## Computing local Moran’s I\n\n```{r}\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n```\n\n::: callout-note\n-   Ii: the local Moran’s I statistics\n\n-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis\n\n-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis\n\n-   Z.Ii:the standard deviate of local moran statistic\n\n-   Pr(): the p-value of local moran statistic\n:::\n\n```{r}\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n```\n\n## Mapping the local Moran’s I\n\nBefore mapping, Append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame\n\n```{r}\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n\n## Mapping local Moran’s I values\n\n```{r}\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: callout-note\nthere is evidence for both positive and negative Ii values. Next we should consider p-values for each of these values\n:::\n\n## Mapping local Moran’s I p-values\n\n```{r}\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n## Mapping both local Moran’s I values and p-values\n\n```{r}\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n```\n:::\n\n### **5.2 Creating a LISA Cluster Map**\n\n**Purpose**: to categorize areas based on their spatial relationships.\n\n::: panel-tabset\n## Step 1: Plotting Moran scatterplot\n\neg.can show us whether counties with high GDP per capita are clustered together or if low GDP counties are near each other, indicating spatial patterns in economic development.\n\n```{r}\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n```\n\n::: callout-note\nThe top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC.\n\nThis are high-high locations\n:::\n\n## Step 2: Plotting Moran scatterplot with standardised variable\n\n-   **Purpose**: Standardizes the GDP per capita variable for better comparison in the Moran scatterplot.\n\n-   **Steps**:\n\n    1.  **Centering**: Subtract the mean of the GDP per capita values (ignoring NAs) to center the data around zero.\n\n    2.  **Scaling**: Divide the centered values by their standard deviation to standardize the data.\n\n```{r}\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n```\n\n**`as.vector()`**: Ensures the output is a vector, which fits neatly into the data frame for further analysis.\n\n```{r}\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n```\n:::\n\n::: panel-tabset\n## Step 3: Preparing LISA map classes\n\n**Initialize Quadrant Vector**:\n\n```{r}\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n```\n\n**Calculate Spatially Lagged GDPPC & Center around its mean:**\n\n```{r}\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n```\n\n**Centers the local Moran’s I values around their mean:**\n\n```{r}\nLM_I <- localMI[,1] - mean(localMI[,1])    \n```\n\n**Set Significance Level:**\n\n```{r}\nsignif <- 0.05\n```\n\n**Define Cluster Categories**:\n\n-   Assigns values to the quadrant vector based on the relationships:\n\n    -   Low-Low (1): Low lag and high local Moran’s I\n\n    -   Low-High (2): High lag and low local Moran’s I\n\n    -   High-Low (3): Low lag and low local Moran’s I\n\n    -   High-High (4): High lag and high local Moran’s I\n\n```{r}\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4\n```\n\n**Marks locations with non-significant Moran’s I results as category 0:**\n\n```{r}\nquadrant[localMI[,5]>signif] <- 0\n```\n\n**Step 4: Plotting LISA map**\n\n```{r}\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n## Plotting Local Moran’s I and P-Values\n\nPros:\n\n-   Allows for a clearer understanding of significant clusters and outliers.\n\n-   Helps identify not only where clusters exist but also their statistical significance.\n\n```{r}\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n```\n\n```{r}\ntmap_arrange(localMI.map, pvalue.map, asp=2, ncol=2)\n```\n:::\n\n<br/><br/>\n\n## 6.0 **Hot Spot and Cold Spot Area Analysis**\n\n-   **Purpose**: Identify hot spot (high-value) and cold spot (low-value) areas using localized spatial statistics.\n\n-   **Definition of Hot Spot**: A region that has higher values relative to its surroundings.\n\n### 6.1 Getis and Ord’s G-Statistics\n\n-   A statistical method to detect spatial anomalies by analyzing neighbors within a certain distance.\n\n-   **Key Steps**:\n\n    1.  **Derive Spatial Weight Matrix**: Define neighbors based on distance, not just shared borders.\n\n    2.  **Compute G_i Statistics**: Calculate statistics to identify spatial clusters.\n\n    3.  **Map G_i Statistics**: Visualize the results to highlight hot and cold spots.\n\n### 6.2 Deriving Distance-Based Weight Matrix\n\n**Types of Matrices**:\n\n-   **Fixed Distance Weight Matrix**: Neighbors defined by a set distance.\n\n-   **Adaptive Distance Weight Matrix**: Neighbors defined by varying distances based on data density.\n\n**Deriving the Centroid**\n\n-   Because Points are required to associate with each polygon for connectivity analysis.\n\n<!-- -->\n\n-   Map the centroid function to extract coordinates:\n\n```{r}\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n```\n\n**Determine the Cut-Off Distance**\n\n-   to establish an upper limit for the distance band in spatial analysis.\n\n    **1) Find K Nearest Neighbors**:\n\n    -   Use `knearneigh()` from the **spdep** package to get indices of points that are the k nearest neighbors of each other.\n\n    **2) Convert to Neighbors List**:\n\n    -   Transform the output from `knearneigh()` into a neighbors list format using `knn2nb()`, which creates a list of neighbor region IDs.\n\n    **3) Calculate Distances**:\n\n    -   Use `nbdists()` to compute the lengths of the neighbor relationships, which gives distances in the coordinate units (kilometers if not projected).\n\n    **4) Flatten the List**:\n\n    -   Remove the list structure of the distances using `unlist()`.\n\n```{r}\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n```\n\n::: callout-note\nMax is 61.79, can use this as the upper threshold.\n\nUsing this gives certainty that all units will have at least one neighbour\n:::\n\n::: panel-tabset\n## Computing fixed distance weight matrix\n\n```{r}\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n```\n\nconvert the nb object into spatial weights object:\n\n```{r}\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n```\n\n::: callout-note\n-   **Purpose**: Address the variability in neighbor counts based on population density.\n\n-   **Characteristics**:\n\n    -   **Fixed Distance Weight Matrix**:\n\n        -   Urban areas often have more neighbors due to higher density.\n\n        -   Rural areas have fewer neighbors, leading to less smooth neighbor relationships.\n:::\n\n::: callout-note\n**Solution**:\n\n-   Use **k-nearest neighbors (k-NN)** to control the number of neighbors directly.\n\n-   This allows for more balanced neighbor relationships, either by accepting asymmetric neighbors or enforcing symmetry.\n:::\n\n## Computing adaptive distance weight matrix\n\n```{r}\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n```\n\n```{r}\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n```\n:::\n\n<br/><br/>\n\n## 7.0 **Computing Gi statistics**\n\n::: panel-tabset\n## Gi statistics using fixed distance\n\n```{r}\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n```\n\n::: callout-note\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\n\n**Interpretation of Gi Statistics**:\n\n-   Represented as a Z-score.\n\n-   Higher values indicate stronger clustering intensity.\n\n-   The sign (positive or negative) shows whether it is a high or low cluster.\n:::\n\n**Joining Gi Values to Hunan Data**\n\n```{r}\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n```\n\n::: callout-note\n**Tasks Performed**:\n\n1.  **Convert Output**: Changes the G\\* values from a vector to a matrix using `as.matrix()`.\n\n2.  **Join Data**: Uses `cbind()` to combine the original `hunan` data with the G\\* values, creating a new SpatialPolygonDataFrame called `hunan.gi`.\n\n3.  **Rename Field**: Renames the G\\* values column to `gstat_fixed` for clarity.\n:::\n\n## Mapping Gi values with fixed distance weights\n\n```{r}\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n```\n\n## Gi statistics using adaptive distance\n\n```{r}\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n```\n\n## Mapping Gi values with adaptive distance weights\n\n```{r}\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n```\n:::\n","srcMarkdownNoYaml":"\n\n## 1.0 Overview\n\n-   **Objective of spatial policy**: Ensure equal distribution of development in the province.\n\n-   **Study Purpose**: Use spatial statistics to check for even distribution of development.\n\n-   **If Not Even**:\n\n    -   Investigate signs of spatial clustering (areas where development is grouped).\n\n    -   Identify where these clusters are located.\n\n-   **Focus**: Analyze the spatial pattern of GDP per capita in Hunan Province, China.\n\n<br/><br/>\n\n## **2.0 Setup**\n\n### **2.1 Installing R-Packages**\n\n-   **sf**: Importing and handling geospatial data in R\n\n-   **spdep**: Compute spatial weights, global and local spatial autocorrelation statistics\n\n-   **tmap**: Trepare cartographic quality chropleth map\n\n-   **tidyverse**: For wrangling attribute data in R\n\n```{r}\npacman::p_load(sf, spdep, tmap, tidyverse)\n```\n\n<br/><br/>\n\n### **2.2 Data Acquisition**\n\nTwo data sets will be used:\n\n-   `Hunan county boundary layer`: a geospatial data set in ESRI shapefile format.\n\n-   `Hunan_2012.csv`: contains selected Hunan’s local development indicators in 2012.\n\n::: panel-tabset\n# **Importing Geospatial Data**\n\n```{r}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n# Importing Aspatial Data\n\n```{r}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n### **2.3 Performing relational join**\n\n```{r}\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n```\n\n### 2.4 Visualising Regional Development Indicator\n\n```{r}\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n## 3.0 **Global Measures of Spatial Autocorrelation**\n\n::: panel-tabset\n## Step 1: Computing Contiguity Spatial Weights\n\nBefore we can compute the Global Spatial autocorrelation statistics, we need to:\n\n-   Construct spatial weights for the study area.\n\n    -   By Computing contiguity weight matrices based on adjacent regions.\n    -   **using Queen Criteria**:\n        -   Default is **TRUE**: Includes all neighbors that touch at edges or corners.\n\n        -   You can set `queen = FALSE` to consider only edge-touching neighbors (first-order neighbors).\n\n-   So we can Define neighborhood relationships between geographical units (e.g., counties).\n\n```{r}\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n```\n\n::: callout-note\nThere are 88 area units in Hunan.\n\nThe most connected area unit has 11 neighbours\n\nOnly 2 area aunits with 1 link\n:::\n\n## Step 2: Row-standardised weights matrix\n\nNow, assign weights to each neighboring polygon.\n\n-   **Method**: Assign each using equal weights (style = \"W\")\n\n-   **Weight Calculation**:\n\n    -   Assign weight of fraction 1/(#ofneighbors) to each neighboring county\n\n    -   Sum the weighted values (e.g., income) from neighbors.\n\n-   **Drawback**:\n\n    -   Edge polygons have fewer neighbors, which can skew results (over- or under-estimate spatial autocorrelation).\n\n-   **Note**: For this example, we'll use style = \"W\" for simplicity, but other options, like style = \"B,\" are more robust.\n\n```{r}\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n```\n\n::: callout-note\nThe function `nb2listw()` requires an object of class **nb** (neighborhood list).\n\n**style**: Defines how weights are calculated. Options include:\n\n-   **\"W\"**: Row standardized weights (sums to 1 across neighbors).\n\n-   **\"B\"**: Basic binary coding (weights are either 0 or 1).\n\n-   **\"C\"**: Globally standardized weights (sums to the total number of connections).\n\n-   **\"U\"**: Equal weights divided by the number of neighbors (sums to 1).\n\n-   **\"minmax\"**: Min-max normalization (scales weights between 0 and 1).\n\n-   **\"S\"**: Variance-stabilizing coding (improves stability of weights).\n\n**zero.poly**:\n\n-   If set to **TRUE**, this includes weights of zero for regions without neighbors.\n\n-   This results in lag values of zero for those regions, which means they won't affect the analysis.\n\n-   It uses a formula that generates a vector of zeros for regions without neighbors, leading to a spatially lagged value of zero for those regions.\n\n**Summary**\n\n-   The **style** argument determines how to handle the weights for neighboring regions.\n\n-   **zero.poly** allows for handling of regions that have no neighbors, potentially simplifying analysis but may not always be sensible.\n:::\n:::\n\n## 3.0 **Global Measures of Spatial Autocorrelation: Moran’s I**\n\n::: panel-tabset\n## Maron’s I test\n\n```{r}\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: callout-note\n## Findings\n\nMoran I statistic (0.300749970) -\\> indicate Positive correlation in GDP per capita\n\nSD of 4.7351 -\\> indicate Moran's I is \\> expected value under null hypo\n\nP-value of 1.095e-06 (0.000001095) -\\> is \\< 0.05, indicates strong statistical significance\n\nExpectation of -0.011494253 -\\> we expect slight negative autocorrelation if there were no spatial structure\n\nSince p-value \\< 0.05, we reject null hypo of no spatial autocorrelation. This strongly suggests there is significant positive spatial clustering of GDPPC in Hunan Province. (Regions with High GDPPC is near areas with high GDPPC\n:::\n\n## Computing Monte Carlo Moran’s I\n\n```{r}\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: callout-note\n## Findings\n\nMoran I statistic (0.30075) -\\> indicate Positive correlation in GDP per capita\n\nP-value of 0.001 -\\> \\< 0.05, indicates that the probability of obtaining a Moran's I value as extreme as the observed \\>= 1 under the null hypo\n\nThus, we reject null hypo as p value \\< 0.05. There is strong evidence that areas with high GDPPC are near areas with high GDPPC\n:::\n\n## Visualising Monte Carlo Moran’s I\n\n```{r}\nmean(bperm$res[1:999])\nvar(bperm$res[1:999])\nsummary(bperm$res[1:999])\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n## Plotting using ggplot2\n\n```{r}\n# Create a data frame from the simulated results\ndata <- data.frame(Simulated_Morans_I = bperm$res[1:999])\n\n# Plot using ggplot2\nggplot(data, aes(x = Simulated_Morans_I)) +\n  geom_histogram(binwidth = (max(data$Simulated_Morans_I) - min(data$Simulated_Morans_I)) / 20, \n                 fill = \"blue\", \n                 color = \"black\") +\n  geom_vline(xintercept = 0, \n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n:::\n\n## 3.0 **Global Measures of Spatial Autocorrelation: Geary’s C**\n\n::: panel-tabset\n### **Geary’s C test**\n\n```{r}\ngeary.test(hunan$GDPPC, listw=rswm_q)\n```\n\n::: callout-note\n## Findings\n\nGeary C statistic (0.6907223) -\\> indicate a level of spatial autocorrelation, lower value suggest positive spatial autocorrelation\n\nSD of 3.6108 -\\> indicates significant lower than expected value under null hypo\n\nP-value of 0.0001526 -\\> is \\< 0.05, indicates strong statistical significance\n\nExpectation of 1.0000000 -\\> on avg, we would expect no spatial autocorrelation\n\nSince p-value \\< 0.05, we reject null hypo of no spatial autocorrelation. This strongly suggests there is significant positive spatial clustering of GDPPC in Hunan Province. (Regions with High GDPPC is near areas with high GDPPC than would be expected by chance\n:::\n\n## Computing Monte Carlo **Geary’s C**\n\n```{r}\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n```\n\n::: callout-note\n## Findings\n\nGeary's C Statistic (0.69072) -\\> indicate some level of positive spatial autocorrelation\n\nObserved Rank of 1 -\\> indicates that the observed value is the smallest among all the simulated values. This suggests that the observed spatial autocorrelation is much stronger than what would be expected under the null hypothesis.\n\nP-value of 0.001 -\\> \\< 0.05, indicates strong statistical significance\n\nThus, we reject null hypo as p value \\< 0.05. There is strong evidence that areas with high GDPPC are near areas with high GDPPC\n:::\n\n## Visualising Monte Carlo **Geary’s C**\n\n```{r}\nmean(bperm$res[1:999])\nvar(bperm$res[1:999])\nsummary(bperm$res[1:999])\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n:::\n\n<br/><br/>\n\n## 4.0 **Spatial Correlogram**\n\n-   **Spatial Correlograms**: Useful for examining patterns of spatial autocorrelation.\n\n-   **Function**: Show how correlated pairs of spatial observations are as distance (lag) increases.\n\n-   **Plot Type**: Graphs of autocorrelation indices (like Moran’s I or Geary’s c) against distance.\n\n-   **Comparison with Variograms**:\n\n    -   Not as fundamental as variograms, which are key in geostatistics.\n\n    -   Provide richer information for exploratory and descriptive analysis than variograms.\n\n::: panel-tabset\n## Compute Moran’s I correlogram\n\n```{r}\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n```\n\n-   **Plot Limitations**:\n\n    -   Plots may not give a complete interpretation of autocorrelation results.\n\n    -   Not all autocorrelation values are statistically significant.\n\n-   **Importance of Full Analysis**:\n\n    -   Necessary to examine the complete analysis report.\n\n    -   Printing the analysis results provides more detailed insights.\n\n```{r}\nprint(MI_corr)\n```\n\n::: callout-note\n### Statistical Observations\n\n1.  **Positive Autocorrelation**:\n\n    -   The first three lags (1, 2, and 3) show positive Moran's I values (0.30075, 0.20601, and 0.06683), indicating clustering of similar GDP per capita values at these distances.\n\n2.  **Statistical Significance**:\n\n    -   **Lags 1 and 2**: Highly significant (p-values of **2.189e-06** and **2.029e-06**), suggesting strong evidence of positive spatial autocorrelation.\n\n    -   **Lag 3**: Also significant (p-value of **0.0404**), indicating some level of clustering, but less strong than the first two lags.\n\n    -   **Lag 4**: Not significant (p-value of **0.2260**), suggesting a lack of clustering at this distance.\n\n    -   **Lag 5 and 6**: Show negative values (-0.15305 and -0.11871) with significant p-values (**5.984e-05** and **0.008886**), indicating that at these distances, similar values are less clustered.\n\n3.  **General Trend**:\n\n    -   The trend shows strong positive autocorrelation at shorter distances (lags 1-3), but transitions to negative autocorrelation at longer distances (lags 5-6).\n\n### Conclusion:\n\n-   There is strong evidence of positive spatial clustering of GDP per capita in Hunan Province at shorter distances, but this pattern diminishes and even reverses at greater distances, suggesting that local clusters may dissipate as distance increases.\n:::\n\n## Compute Geary’s C correlogram and plot\n\n```{r}\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n```\n\n```{r}\nprint(GC_corr)\n```\n:::\n\n<br/><br/>\n\n## 5.0 **Local Measures of Spatial Autocorrelation (LMSA)**\n\n-   **Focus**: Examines relationships between each observation and its surrounding observations.\n\n<!-- -->\n\n-   **Nature**:\n\n    -   Not summary statistics; they provide individual scores for each location.\n\n    -   Helps understand the spatial structure of data.\n\n-   **Similarity to Global Measures**:\n\n    -   Intuition is similar to global statistics.\n\n    -   Some global measures can be broken down into local measures.\n\n-   **Key Examples**:\n\n    -   **Local Indicators of Spatial Association (LISA)**: Provides insights into local clustering and relationships.\n\n    -   **Getis-Ord’s Gi-statistics**: Another LMSA method that offers complementary insights for geographic data.\n\n### **5.1 Local Indicators of Spatial Association(LISA)**\n\n-   **Purpose**: Evaluate the presence of clusters and outliers in spatial data.\n\n-   **Example**: Analyzing GDP per capita in Hunan Province, China.\n\n    -   **Clusters**: Areas with significantly higher or lower GDP per capita than expected by chance.\n\n    -   **Interpretation**: Identifies counties with values above or below a random distribution.\n\n::: panel-tabset\n## Step 1: Computing Contiguity Spatial Weights\n\nSame as how we compute for Global Indicators of Spatial Autocorrelation\n\n```{r}\nsummary(wm_q)\n```\n\n## Step 2: Row-standardised weights matrix\n\nSame as how we compute for Global Indicators of Spatial Autocorrelation\n\n```{r}\nrswm_q\n```\n:::\n\n::: panel-tabset\n## Computing local Moran’s I\n\n```{r}\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n```\n\n::: callout-note\n-   Ii: the local Moran’s I statistics\n\n-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis\n\n-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis\n\n-   Z.Ii:the standard deviate of local moran statistic\n\n-   Pr(): the p-value of local moran statistic\n:::\n\n```{r}\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n```\n\n## Mapping the local Moran’s I\n\nBefore mapping, Append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame\n\n```{r}\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n\n## Mapping local Moran’s I values\n\n```{r}\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: callout-note\nthere is evidence for both positive and negative Ii values. Next we should consider p-values for each of these values\n:::\n\n## Mapping local Moran’s I p-values\n\n```{r}\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n## Mapping both local Moran’s I values and p-values\n\n```{r}\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n```\n:::\n\n### **5.2 Creating a LISA Cluster Map**\n\n**Purpose**: to categorize areas based on their spatial relationships.\n\n::: panel-tabset\n## Step 1: Plotting Moran scatterplot\n\neg.can show us whether counties with high GDP per capita are clustered together or if low GDP counties are near each other, indicating spatial patterns in economic development.\n\n```{r}\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n```\n\n::: callout-note\nThe top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC.\n\nThis are high-high locations\n:::\n\n## Step 2: Plotting Moran scatterplot with standardised variable\n\n-   **Purpose**: Standardizes the GDP per capita variable for better comparison in the Moran scatterplot.\n\n-   **Steps**:\n\n    1.  **Centering**: Subtract the mean of the GDP per capita values (ignoring NAs) to center the data around zero.\n\n    2.  **Scaling**: Divide the centered values by their standard deviation to standardize the data.\n\n```{r}\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n```\n\n**`as.vector()`**: Ensures the output is a vector, which fits neatly into the data frame for further analysis.\n\n```{r}\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n```\n:::\n\n::: panel-tabset\n## Step 3: Preparing LISA map classes\n\n**Initialize Quadrant Vector**:\n\n```{r}\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n```\n\n**Calculate Spatially Lagged GDPPC & Center around its mean:**\n\n```{r}\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n```\n\n**Centers the local Moran’s I values around their mean:**\n\n```{r}\nLM_I <- localMI[,1] - mean(localMI[,1])    \n```\n\n**Set Significance Level:**\n\n```{r}\nsignif <- 0.05\n```\n\n**Define Cluster Categories**:\n\n-   Assigns values to the quadrant vector based on the relationships:\n\n    -   Low-Low (1): Low lag and high local Moran’s I\n\n    -   Low-High (2): High lag and low local Moran’s I\n\n    -   High-Low (3): Low lag and low local Moran’s I\n\n    -   High-High (4): High lag and high local Moran’s I\n\n```{r}\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4\n```\n\n**Marks locations with non-significant Moran’s I results as category 0:**\n\n```{r}\nquadrant[localMI[,5]>signif] <- 0\n```\n\n**Step 4: Plotting LISA map**\n\n```{r}\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n## Plotting Local Moran’s I and P-Values\n\nPros:\n\n-   Allows for a clearer understanding of significant clusters and outliers.\n\n-   Helps identify not only where clusters exist but also their statistical significance.\n\n```{r}\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n```\n\n```{r}\ntmap_arrange(localMI.map, pvalue.map, asp=2, ncol=2)\n```\n:::\n\n<br/><br/>\n\n## 6.0 **Hot Spot and Cold Spot Area Analysis**\n\n-   **Purpose**: Identify hot spot (high-value) and cold spot (low-value) areas using localized spatial statistics.\n\n-   **Definition of Hot Spot**: A region that has higher values relative to its surroundings.\n\n### 6.1 Getis and Ord’s G-Statistics\n\n-   A statistical method to detect spatial anomalies by analyzing neighbors within a certain distance.\n\n-   **Key Steps**:\n\n    1.  **Derive Spatial Weight Matrix**: Define neighbors based on distance, not just shared borders.\n\n    2.  **Compute G_i Statistics**: Calculate statistics to identify spatial clusters.\n\n    3.  **Map G_i Statistics**: Visualize the results to highlight hot and cold spots.\n\n### 6.2 Deriving Distance-Based Weight Matrix\n\n**Types of Matrices**:\n\n-   **Fixed Distance Weight Matrix**: Neighbors defined by a set distance.\n\n-   **Adaptive Distance Weight Matrix**: Neighbors defined by varying distances based on data density.\n\n**Deriving the Centroid**\n\n-   Because Points are required to associate with each polygon for connectivity analysis.\n\n<!-- -->\n\n-   Map the centroid function to extract coordinates:\n\n```{r}\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n```\n\n**Determine the Cut-Off Distance**\n\n-   to establish an upper limit for the distance band in spatial analysis.\n\n    **1) Find K Nearest Neighbors**:\n\n    -   Use `knearneigh()` from the **spdep** package to get indices of points that are the k nearest neighbors of each other.\n\n    **2) Convert to Neighbors List**:\n\n    -   Transform the output from `knearneigh()` into a neighbors list format using `knn2nb()`, which creates a list of neighbor region IDs.\n\n    **3) Calculate Distances**:\n\n    -   Use `nbdists()` to compute the lengths of the neighbor relationships, which gives distances in the coordinate units (kilometers if not projected).\n\n    **4) Flatten the List**:\n\n    -   Remove the list structure of the distances using `unlist()`.\n\n```{r}\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n```\n\n::: callout-note\nMax is 61.79, can use this as the upper threshold.\n\nUsing this gives certainty that all units will have at least one neighbour\n:::\n\n::: panel-tabset\n## Computing fixed distance weight matrix\n\n```{r}\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n```\n\nconvert the nb object into spatial weights object:\n\n```{r}\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n```\n\n::: callout-note\n-   **Purpose**: Address the variability in neighbor counts based on population density.\n\n-   **Characteristics**:\n\n    -   **Fixed Distance Weight Matrix**:\n\n        -   Urban areas often have more neighbors due to higher density.\n\n        -   Rural areas have fewer neighbors, leading to less smooth neighbor relationships.\n:::\n\n::: callout-note\n**Solution**:\n\n-   Use **k-nearest neighbors (k-NN)** to control the number of neighbors directly.\n\n-   This allows for more balanced neighbor relationships, either by accepting asymmetric neighbors or enforcing symmetry.\n:::\n\n## Computing adaptive distance weight matrix\n\n```{r}\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n```\n\n```{r}\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n```\n:::\n\n<br/><br/>\n\n## 7.0 **Computing Gi statistics**\n\n::: panel-tabset\n## Gi statistics using fixed distance\n\n```{r}\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n```\n\n::: callout-note\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\n\n**Interpretation of Gi Statistics**:\n\n-   Represented as a Z-score.\n\n-   Higher values indicate stronger clustering intensity.\n\n-   The sign (positive or negative) shows whether it is a high or low cluster.\n:::\n\n**Joining Gi Values to Hunan Data**\n\n```{r}\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n```\n\n::: callout-note\n**Tasks Performed**:\n\n1.  **Convert Output**: Changes the G\\* values from a vector to a matrix using `as.matrix()`.\n\n2.  **Join Data**: Uses `cbind()` to combine the original `hunan` data with the G\\* values, creating a new SpatialPolygonDataFrame called `hunan.gi`.\n\n3.  **Rename Field**: Renames the G\\* values column to `gstat_fixed` for clarity.\n:::\n\n## Mapping Gi values with fixed distance weights\n\n```{r}\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n```\n\n## Gi statistics using adaptive distance\n\n```{r}\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n```\n\n## Mapping Gi values with adaptive distance weights\n\n```{r}\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n```\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"Hands-on_Ex06.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"cosmo","title":"Hands-on Exercise 6","subtitle":"Global/Local Measures of Spatial Autocorrelation","author":"Kai Feng","date":"Sept 20, 2024","date-modified":"last-modified"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}