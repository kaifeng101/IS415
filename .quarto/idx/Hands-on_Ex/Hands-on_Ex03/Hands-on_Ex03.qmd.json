{"title":"Hands-on Exercise 3","markdown":{"yaml":{"title":"Hands-on Exercise 3","subtitle":"Spatial Point Patterns Analysis","author":"Kai Feng","date":"August 30, 2024","date-modified":"last-modified","execute":{"eval":true,"echo":true,"freeze":true}},"headingText":"**1.0 1st Order Spatial Point Patterns Analysis Methods**","containsRefs":false,"markdown":"\n\n\nSpatial Point Pattern Analysis is a method used to study how points are spread out over an area. These points can represent:\n\n-   Events like crimes, traffic accidents, or disease outbreaks.\n\n-   Locations of businesses such as coffee shops, fast food places, or facilities like childcare centers and eldercare services.\n\nIn this exercise, we'll use a tool called `spatstat` to analyze the distribution of childcare centers in Singapore.\n\n**Questions we want to answer are:**\n\n1.  **Are childcare centers in Singapore spread out randomly, or is there a pattern?**\n\n2.  **If they’re not randomly distributed, where are the areas with the highest concentration of childcare centers?**\n\n## **2.0 Setup**\n\n### **2.1 Installing R-Packages**\n\n-   [**sf**](https://r-spatial.github.io/sf/) for handling geospatial data\n\n-   [**spatstat**](https://spatstat.org/) for point pattern analysis. In this exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer. **To study how points are distributed & to create a density map showing where points are concentrated**\n\n-   [**raster**](https://cran.r-project.org/web/packages/raster/) deals with grid-based spatial data, like satellite img. In this exercise, we'll use it to convert images created by spatstat into a format that raster can work with.\n\n-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) for manupulating geographic data. In this exercise, we mainly use it to convert *Spatial* objects -\\> *ppp* format of **spatstat**.\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) package\n\n```{r}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, devtools,sp)\n```\n\n### **2.2 Data Acquisition**\n\n3 datasets will be used:\n\n-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\n\n-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\n\n-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.\n\n### **2.3 Importing Geospatial Data into R**\n\n```{r}\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>% \n  st_transform(crs=3414)\n```\n\n```{r}\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n```\n\n```{r}\nmpsz_sf <- st_read(dsn=\"data\", layer=\"MP14_SUBZONE_WEB_PL\")\n```\n\n### **2.4 Assigning Standard Coordinate Systems**\n\n```{r}\nsg_sf <- st_transform(sg_sf, crs=3414)\nmpsz_sf <- st_transform(mpsz_sf, crs=3414)\n```\n\n### **2.5 Data Preparation and Wrangling**\n\n##### 2.5.1 Convert simple feature data frame to sp's Spatial\\* class\n\n```{r}\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n```\n\n```{r}\nchildcare\n```\n\n```{r}\nmpsz\n```\n\n```{r}\nsg\n```\n\n##### 2.5.2 Convert Spatial\\* class into generic sp format\n\n\\* **spatstat** requires the analytical data in **ppp** object form. **(Need convert to Spatial Object first -\\> ppp object)**\n\n```{r}\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n```\n\n```{r}\nchildcare_sp\n```\n\n```{r}\nsg_sp\n```\n\n\\* **Diff between Spatial\\* classes & generic sp object:**\n\nSpatial\\* classes are specialized versions of spatial objects tailored for different types of spatial data, while the generic sp object provides a base class with fundamental spatial features that can be extended by the more specific Spatial\\* classes.\n\n##### 2.5.3 Convert generic sp format into spatstat's ppp format\n\n```{r}\n\nchildcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\nchildcare_ppp\n```\n\n```{r}\nplot(childcare_ppp)\n```\n\n**View Summary Statistics:**\n\n```{r}\nsummary(childcare_ppp)\n```\n\n\\* **There is warning about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.**\n\n## **3.0 Handling duplicated points**\n\n### **3.1 Check duplication in a ppp object**\n\n```{r}\nany(duplicated(childcare_ppp))\n```\n\n### **3.2 Count no. of co-indicence point**\n\n```{r}\nmultiplicity(childcare_ppp)\n```\n\n### **3.3 Check how many locations \\>= 1 point event**\n\n```{r}\nsum(multiplicity(childcare_ppp) > 1)\n```\n\n### **View locations of these duplicated point events:**\n\n```{r}\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n```\n\n```{r}\ntmap_mode('plot')\n```\n\n### **3.3 3 ways to overcome duplicate points**\n\n-   Delete the duplicate -\\> but, this will result in some useful point events be lost\n\n-   jittering -\\> this will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n-   make each point 'unique' + attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\n\n```{r}\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n```\n\n```{r}\nany(duplicated(childcare_ppp_jit))\n```\n\n## **4.0 Creating owin object**\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.\n\nConvert *sg* SpatialPolygon object -\\> owin object of **spatstat**.\n\n```{r}\nsg_owin <- as.owin(sg_sf)\n```\n\nDisplay:\n\n```{r}\nplot(sg_owin)\n```\n\n```{r}\nsummary(sg_owin)\n```\n\n### **4.1 Combining point events object + owin object**\n\nExtract childcare events that are located within Singapore\n\n```{r}\nchildcareSG_ppp = childcare_ppp[sg_owin]\n```\n\n```{r}\nsummary(childcareSG_ppp)\n```\n\n```{r}\nchildcareSG_ppp <- as.ppp(childcareSG_ppp)\nplot(childcareSG_ppp)\n```\n\n## **5.0 First-order Spatial Point Patterns Analysis**\n\n### **5.1 Kernel Density Estimation (KDE)**\n\n##### 5.1.1 Computing kernel density estimation using automatic bandwidth selection method\n\n-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).\n\n-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.\n\n```{r}\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nplot(kde_childcareSG_bw)\n```\n\n\\* Density values is 0 to 0.000035 (too small to understand) -\\> because default unit of measurement of svy21 is in meter **\\[so it is computed in no. of points/sq meter\\]**\n\n**To retrieve bandwidth used to compute the kde layer:**\n\n```{r}\nbw <- bw.diggle(childcareSG_ppp)\nbw\n```\n\n##### 5.1.2 Convert unit of measurement from meter -\\> km\n\n```{r}\nchildcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n```\n\n```{r}\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n```\n\n##### 5.1.3 **Different automatic badwidth methods**\n\n-   bw.CvL()\n\n-   bw.scott()\n\n-   *bw.ppl()*\n\n```{r}\n bw.CvL(childcareSG_ppp.km)\n```\n\n```{r}\n bw.scott(childcareSG_ppp.km)\n```\n\n```{r}\n bw.ppl(childcareSG_ppp.km)\n```\n\n```{r}\n bw.diggle(childcareSG_ppp.km)\n```\n\nBaddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.\n\n```{r}\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n```\n\n##### 5.1.4 **Different kernel methods**\n\nDefault in *density.ppp()* is *gaussian. \\[Choose from Epanechnikov, Quartic and Dics\\]*\n\n```{r}\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n```\n\n##### 5.1.4 **Fixed and Adaptive KDE**\n\n###### 5.1.4.1 **Computing KDE by using fixed bandwidth**\n\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.\n\n```{r}\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n```\n\n###### 5.1.4.2 **Computing KDE by using adaptive bandwidth**\n\nvery sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\n\n```{r}\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n```\n\n**Fixed VS Adaptive Kernel density estimation:**\n\n```{r}\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n```\n\n###### 5.1.4.3 **Converting KDE output into grid object**\n\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\n```{r}\ngridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n```\n\n###### 5.1.4.4 **Converting** gridded density objects into raster\n\n```{r}\nkde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)\nkde_childcareSG_bw_raster\n```\n\n\\* crs is NA\n\n###### 5.1.4.5 Assigning projection systems\n\n```{r}\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n```\n\n###### 5.1.4.6 **Visualising the output in tmap**\n\n```{r}\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n```\n\n\\* Notice that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.\n\n###### 5.1.4.7 **Comparing Spatial Point Patterns using KDE**\n\ncompare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\n**Extract target planning areas:**\n\n```{r}\npg <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n```\n\n**Plot:**\n\n```{r}\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n```\n\n```{r}\nplot(tm, main = \"Tampines\")\n```\n\n```{r}\nplot(ck, main = \"Choa Chu Kang\")\n```\n\n```{r}\nplot(jw, main = \"Jurong West\")\n```\n\n###### 5.1.4.8 **Creating** owin object\n\n```{r}\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n```\n\n#### Combining childcare points and the study area\n\n```{r}\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n```\n\nNext, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.\n\n```{r}\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n```\n\n```{r}\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n```\n\n#### Computing KDE\n\n```{r}\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n```\n\n#### Computing fixed bandwidth KDE\n\n```{r}\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n```\n\n### **5.2 Performing Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.**\n\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.\n\nThe test hypotheses are:\n\nHo = The distribution of childcare services are randomly distributed.\n\nH1= The distribution of childcare services are not randomly distributed.\n\nThe 95% confident interval will be used.\n\n##### 5.2.1 **Testing spatial point patterns using Clark and Evans Test**\n\n```{r}\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n##### 5.2.2 **Clark and Evans Test: Choa Chu Kang planning area**\n\n```{r}\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n```\n\n##### 5.2.3 **Clark and Evans Test: Tampines planning area**\n\n```{r}\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n```\n\n## **6.0 Drawing a Spatial Point Map**\n\n```{r}\ntm_shape(mpsz_sf) +\n  tm_polygons() +\n  tm_shape(childcare_sf) +\n  tm_dots()\n```\n\n\\* All the layers on the map fit together properly because they use the same coordinate system. This means they all refer to the same geographical area, which is crucial for accurate mapping and analysis.\n\n### OR -\\> Pin Map\n\n```{r}\ntmap_mode('view')\ntm_shape(childcare_sf) +\n  tm_dots()\n```\n\n\\* Using interactive mode in **tmap** -\\> can zoom in & out. Click on points to see more info\n\n\\* Can choose from different background map styles. **Default = ESRI.WorldGrayCanvas**. (Choose from ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap)\n\n```{r}\ntmap_mode('plot')\n```\n\n\\* **Switch back to \"plot\". Because each interactive mode consume a connection. Avoid \\>10 in 1 RMarkdown doc when publish on Netlify**\n\n## **7.0 Second-order Spatial Point Patterns Analysis**\n\n#### 7.1 **Analysing Spatial Point Process Using G-Function**\n\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event.\n\nCompute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.\n\n#### 7.1.1 **Choa Chu Kang planning area**\n\n#### Computing G-function estimation\n\n```{r}\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with G-function\n\n```{r}\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n```\n\n```{r}\nplot(G_CK.csr)\n```\n\n#### 7.1.2 **Tampiness planning area**\n\n#### Computing G-function estimation\n\n```{r}\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with G-fucntion\n\n```{r}\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n```\n\n```{r}\nplot(G_tm.csr)\n```\n\n#### 7.2 **Analysing Spatial Point Process Using F-Function**\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\n\nCompute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.\n\n#### 7.2.1 **Choa Chu Kang planning area**\n\n#### Computing F-function estimation\n\n```{r}\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with F-fucntion\n\n```{r}\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n```\n\n```{r}\nplot(F_CK.csr)\n```\n\n#### 7.2.2 **Tampines planning area**\n\n#### Computing F-function estimation\n\n```{r}\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\n```{r}\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n```\n\n```{r}\nplot(F_tm.csr)\n```\n\n#### 7.3 **Analysing Spatial Point Process Using K-Function**\n\nK-function measures the number of events found up to a given distance of any particular event.\n\nCompute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using *envelope()* of spatstat package.\n\n#### 7.3.1 **Choa Chu Kang planning area**\n\n#### Computing K-function estimation\n\n```{r}\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n```{r}\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n```\n\n#### 7.3.2 **Tampines planning area**\n\n#### Computing K-function estimation\n\n```{r}\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n```{r}\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n```\n\n#### 7.4 **Analysing Spatial Point Process Using L-Function**\n\nCompute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using *envelope()* of spatstat package.\n\n#### 7.4.1 **Choa Chu Kang planning area**\n\n#### Computing L-function estimation\n\n```{r}\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\n\n```{r}\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n```\n\n#### 7.4.2 **Tampines planning area**\n\n#### Computing L-function estimation\n\n```{r}\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n#### Performing Complete Spatial Randomness Test\n\n```{r}\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n```\n","srcMarkdownNoYaml":"\n\n## **1.0 1st Order Spatial Point Patterns Analysis Methods**\n\nSpatial Point Pattern Analysis is a method used to study how points are spread out over an area. These points can represent:\n\n-   Events like crimes, traffic accidents, or disease outbreaks.\n\n-   Locations of businesses such as coffee shops, fast food places, or facilities like childcare centers and eldercare services.\n\nIn this exercise, we'll use a tool called `spatstat` to analyze the distribution of childcare centers in Singapore.\n\n**Questions we want to answer are:**\n\n1.  **Are childcare centers in Singapore spread out randomly, or is there a pattern?**\n\n2.  **If they’re not randomly distributed, where are the areas with the highest concentration of childcare centers?**\n\n## **2.0 Setup**\n\n### **2.1 Installing R-Packages**\n\n-   [**sf**](https://r-spatial.github.io/sf/) for handling geospatial data\n\n-   [**spatstat**](https://spatstat.org/) for point pattern analysis. In this exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer. **To study how points are distributed & to create a density map showing where points are concentrated**\n\n-   [**raster**](https://cran.r-project.org/web/packages/raster/) deals with grid-based spatial data, like satellite img. In this exercise, we'll use it to convert images created by spatstat into a format that raster can work with.\n\n-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) for manupulating geographic data. In this exercise, we mainly use it to convert *Spatial* objects -\\> *ppp* format of **spatstat**.\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) package\n\n```{r}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, devtools,sp)\n```\n\n### **2.2 Data Acquisition**\n\n3 datasets will be used:\n\n-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\n\n-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\n\n-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.\n\n### **2.3 Importing Geospatial Data into R**\n\n```{r}\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>% \n  st_transform(crs=3414)\n```\n\n```{r}\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n```\n\n```{r}\nmpsz_sf <- st_read(dsn=\"data\", layer=\"MP14_SUBZONE_WEB_PL\")\n```\n\n### **2.4 Assigning Standard Coordinate Systems**\n\n```{r}\nsg_sf <- st_transform(sg_sf, crs=3414)\nmpsz_sf <- st_transform(mpsz_sf, crs=3414)\n```\n\n### **2.5 Data Preparation and Wrangling**\n\n##### 2.5.1 Convert simple feature data frame to sp's Spatial\\* class\n\n```{r}\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n```\n\n```{r}\nchildcare\n```\n\n```{r}\nmpsz\n```\n\n```{r}\nsg\n```\n\n##### 2.5.2 Convert Spatial\\* class into generic sp format\n\n\\* **spatstat** requires the analytical data in **ppp** object form. **(Need convert to Spatial Object first -\\> ppp object)**\n\n```{r}\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n```\n\n```{r}\nchildcare_sp\n```\n\n```{r}\nsg_sp\n```\n\n\\* **Diff between Spatial\\* classes & generic sp object:**\n\nSpatial\\* classes are specialized versions of spatial objects tailored for different types of spatial data, while the generic sp object provides a base class with fundamental spatial features that can be extended by the more specific Spatial\\* classes.\n\n##### 2.5.3 Convert generic sp format into spatstat's ppp format\n\n```{r}\n\nchildcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\nchildcare_ppp\n```\n\n```{r}\nplot(childcare_ppp)\n```\n\n**View Summary Statistics:**\n\n```{r}\nsummary(childcare_ppp)\n```\n\n\\* **There is warning about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.**\n\n## **3.0 Handling duplicated points**\n\n### **3.1 Check duplication in a ppp object**\n\n```{r}\nany(duplicated(childcare_ppp))\n```\n\n### **3.2 Count no. of co-indicence point**\n\n```{r}\nmultiplicity(childcare_ppp)\n```\n\n### **3.3 Check how many locations \\>= 1 point event**\n\n```{r}\nsum(multiplicity(childcare_ppp) > 1)\n```\n\n### **View locations of these duplicated point events:**\n\n```{r}\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n```\n\n```{r}\ntmap_mode('plot')\n```\n\n### **3.3 3 ways to overcome duplicate points**\n\n-   Delete the duplicate -\\> but, this will result in some useful point events be lost\n\n-   jittering -\\> this will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n-   make each point 'unique' + attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\n\n```{r}\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n```\n\n```{r}\nany(duplicated(childcare_ppp_jit))\n```\n\n## **4.0 Creating owin object**\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.\n\nConvert *sg* SpatialPolygon object -\\> owin object of **spatstat**.\n\n```{r}\nsg_owin <- as.owin(sg_sf)\n```\n\nDisplay:\n\n```{r}\nplot(sg_owin)\n```\n\n```{r}\nsummary(sg_owin)\n```\n\n### **4.1 Combining point events object + owin object**\n\nExtract childcare events that are located within Singapore\n\n```{r}\nchildcareSG_ppp = childcare_ppp[sg_owin]\n```\n\n```{r}\nsummary(childcareSG_ppp)\n```\n\n```{r}\nchildcareSG_ppp <- as.ppp(childcareSG_ppp)\nplot(childcareSG_ppp)\n```\n\n## **5.0 First-order Spatial Point Patterns Analysis**\n\n### **5.1 Kernel Density Estimation (KDE)**\n\n##### 5.1.1 Computing kernel density estimation using automatic bandwidth selection method\n\n-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).\n\n-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\n\n-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.\n\n```{r}\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nplot(kde_childcareSG_bw)\n```\n\n\\* Density values is 0 to 0.000035 (too small to understand) -\\> because default unit of measurement of svy21 is in meter **\\[so it is computed in no. of points/sq meter\\]**\n\n**To retrieve bandwidth used to compute the kde layer:**\n\n```{r}\nbw <- bw.diggle(childcareSG_ppp)\nbw\n```\n\n##### 5.1.2 Convert unit of measurement from meter -\\> km\n\n```{r}\nchildcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n```\n\n```{r}\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n```\n\n##### 5.1.3 **Different automatic badwidth methods**\n\n-   bw.CvL()\n\n-   bw.scott()\n\n-   *bw.ppl()*\n\n```{r}\n bw.CvL(childcareSG_ppp.km)\n```\n\n```{r}\n bw.scott(childcareSG_ppp.km)\n```\n\n```{r}\n bw.ppl(childcareSG_ppp.km)\n```\n\n```{r}\n bw.diggle(childcareSG_ppp.km)\n```\n\nBaddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.\n\n```{r}\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n```\n\n##### 5.1.4 **Different kernel methods**\n\nDefault in *density.ppp()* is *gaussian. \\[Choose from Epanechnikov, Quartic and Dics\\]*\n\n```{r}\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n```\n\n##### 5.1.4 **Fixed and Adaptive KDE**\n\n###### 5.1.4.1 **Computing KDE by using fixed bandwidth**\n\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.\n\n```{r}\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n```\n\n###### 5.1.4.2 **Computing KDE by using adaptive bandwidth**\n\nvery sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\n\n```{r}\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n```\n\n**Fixed VS Adaptive Kernel density estimation:**\n\n```{r}\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n```\n\n###### 5.1.4.3 **Converting KDE output into grid object**\n\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\n```{r}\ngridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n```\n\n###### 5.1.4.4 **Converting** gridded density objects into raster\n\n```{r}\nkde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)\nkde_childcareSG_bw_raster\n```\n\n\\* crs is NA\n\n###### 5.1.4.5 Assigning projection systems\n\n```{r}\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n```\n\n###### 5.1.4.6 **Visualising the output in tmap**\n\n```{r}\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n```\n\n\\* Notice that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.\n\n###### 5.1.4.7 **Comparing Spatial Point Patterns using KDE**\n\ncompare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\n**Extract target planning areas:**\n\n```{r}\npg <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n```\n\n**Plot:**\n\n```{r}\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n```\n\n```{r}\nplot(tm, main = \"Tampines\")\n```\n\n```{r}\nplot(ck, main = \"Choa Chu Kang\")\n```\n\n```{r}\nplot(jw, main = \"Jurong West\")\n```\n\n###### 5.1.4.8 **Creating** owin object\n\n```{r}\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n```\n\n#### Combining childcare points and the study area\n\n```{r}\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n```\n\nNext, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.\n\n```{r}\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n```\n\n```{r}\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n```\n\n#### Computing KDE\n\n```{r}\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n```\n\n#### Computing fixed bandwidth KDE\n\n```{r}\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n```\n\n### **5.2 Performing Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.**\n\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.\n\nThe test hypotheses are:\n\nHo = The distribution of childcare services are randomly distributed.\n\nH1= The distribution of childcare services are not randomly distributed.\n\nThe 95% confident interval will be used.\n\n##### 5.2.1 **Testing spatial point patterns using Clark and Evans Test**\n\n```{r}\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n##### 5.2.2 **Clark and Evans Test: Choa Chu Kang planning area**\n\n```{r}\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n```\n\n##### 5.2.3 **Clark and Evans Test: Tampines planning area**\n\n```{r}\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n```\n\n## **6.0 Drawing a Spatial Point Map**\n\n```{r}\ntm_shape(mpsz_sf) +\n  tm_polygons() +\n  tm_shape(childcare_sf) +\n  tm_dots()\n```\n\n\\* All the layers on the map fit together properly because they use the same coordinate system. This means they all refer to the same geographical area, which is crucial for accurate mapping and analysis.\n\n### OR -\\> Pin Map\n\n```{r}\ntmap_mode('view')\ntm_shape(childcare_sf) +\n  tm_dots()\n```\n\n\\* Using interactive mode in **tmap** -\\> can zoom in & out. Click on points to see more info\n\n\\* Can choose from different background map styles. **Default = ESRI.WorldGrayCanvas**. (Choose from ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap)\n\n```{r}\ntmap_mode('plot')\n```\n\n\\* **Switch back to \"plot\". Because each interactive mode consume a connection. Avoid \\>10 in 1 RMarkdown doc when publish on Netlify**\n\n## **7.0 Second-order Spatial Point Patterns Analysis**\n\n#### 7.1 **Analysing Spatial Point Process Using G-Function**\n\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event.\n\nCompute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.\n\n#### 7.1.1 **Choa Chu Kang planning area**\n\n#### Computing G-function estimation\n\n```{r}\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with G-function\n\n```{r}\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n```\n\n```{r}\nplot(G_CK.csr)\n```\n\n#### 7.1.2 **Tampiness planning area**\n\n#### Computing G-function estimation\n\n```{r}\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with G-fucntion\n\n```{r}\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n```\n\n```{r}\nplot(G_tm.csr)\n```\n\n#### 7.2 **Analysing Spatial Point Process Using F-Function**\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\n\nCompute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.\n\n#### 7.2.1 **Choa Chu Kang planning area**\n\n#### Computing F-function estimation\n\n```{r}\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with F-fucntion\n\n```{r}\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n```\n\n```{r}\nplot(F_CK.csr)\n```\n\n#### 7.2.2 **Tampines planning area**\n\n#### Computing F-function estimation\n\n```{r}\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\n```{r}\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n```\n\n```{r}\nplot(F_tm.csr)\n```\n\n#### 7.3 **Analysing Spatial Point Process Using K-Function**\n\nK-function measures the number of events found up to a given distance of any particular event.\n\nCompute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using *envelope()* of spatstat package.\n\n#### 7.3.1 **Choa Chu Kang planning area**\n\n#### Computing K-function estimation\n\n```{r}\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n```{r}\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n```\n\n#### 7.3.2 **Tampines planning area**\n\n#### Computing K-function estimation\n\n```{r}\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n```{r}\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n```\n\n#### 7.4 **Analysing Spatial Point Process Using L-Function**\n\nCompute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package.\n\nPerform monta carlo simulation test using *envelope()* of spatstat package.\n\n#### 7.4.1 **Choa Chu Kang planning area**\n\n#### Computing L-function estimation\n\n```{r}\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n```\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\n\n```{r}\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n```\n\n#### 7.4.2 **Tampines planning area**\n\n#### Computing L-function estimation\n\n```{r}\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n#### Performing Complete Spatial Randomness Test\n\n```{r}\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n```{r}\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"Hands-on_Ex03.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"cosmo","title":"Hands-on Exercise 3","subtitle":"Spatial Point Patterns Analysis","author":"Kai Feng","date":"August 30, 2024","date-modified":"last-modified"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}