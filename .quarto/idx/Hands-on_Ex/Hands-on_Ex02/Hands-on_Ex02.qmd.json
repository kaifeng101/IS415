{"title":"Hands-on Exercise 2","markdown":{"yaml":{"title":"Hands-on Exercise 2","subtitle":"Thematic Mapping and GeoVisualisation with R","author":"Kai Feng","date":"August 24, 2024","date-modified":"last-modified","execute":{"eval":true,"echo":true,"freeze":true}},"headingText":"1.0 Overview -Thematic Map","containsRefs":false,"markdown":"\n\n\nDisplay info about a topic/theme on a geographic location leveraging our spatial cognition & vision systems\n\n**Usage exmaples**\n\n-   Visualize population, temperature, crime rates, property prices using symbols\n\n**Objective**\n\n-   Plot functional & truthful choropleth maps using **`tmap`** packages\n\n**Outcome**![](https://is415-geospatial-with-khant.netlify.app/hands-on_ex/images/example.png)\n\n## 2.0 Setup\n\n### **2.1 Installing R-Packages**\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) package\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data\n\n*\\* Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.* `[Only need to install tidyverse]`\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\n```{r}\npacman::p_load(sf, tmap, tidyverse)\n```\n\n### **2.2 Data Acquisition**\n\n2 datasets will be used:\n\n-   URA Master Plan 2014 Subzone Boundary (Web) -(i.e. [MP14_SUBZONE_WEB_PL](https://beta.data.gov.sg/datasets/d_d14da225fccf921049ab64238ff473d9/view)) in ESRI shapefile format\n    -   geographical boundary of Singapore at the planning subzone level\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 -(i.e. [respopagesextod2011to2020.csv](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)) in csv format\n    -   aspatial data file\n    -   Does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n### 2.3 **Importing Geospatial Data into R**\n\n-   **Import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`**\n\n```{r}\nmpsz = st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\",                 \n               layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n-   Examine content of mpsz\n\n```{r}\nmpsz\n```\n\n*\\* Why show 10 only? -\\> Ans: By default, only show a subset of data.*\n\n-   Use print(mpsz, n=20) -\\> show 20 data\n\n### 2.4 **Importing Aspatial Data into R**\n\n-   **Import `Population` data**\n\n```{r}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n\n### 2.5 **Data Preparation and Wrangling**\n\nTo create a thematic map, first, gather a data table for the year 2020. This table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY.\n\n-   **YOUNG**: age group 0 to 4 until age group 20 to 24,\n\n-   **ECONOMY ACTIVE**: age group 25-29 until age group 60-64,\n\n-   **AGED**: age group 65 and above,\n\n-   **TOTAL**: all age group, and\n\n-   **DEPENDENCY**: the ratio between young and aged against economy active group\n\n#### 2.5.1 Data Wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   `pivot_wider()` *of **tidyr package***\n\n    | ![](images/clipboard-897745879.png){width=\"110\"} -\\> ![](images/clipboard-2883912261.png){width=\"240\"}\n\n-   `mutate()`, `filter()`, `group_by()` and `select()` of ***dplyr package***\n\n```{r}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n| filter                                               | only take Time == 2020                                                           |\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n| mutate                                               | calculation                                                                      |\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n| mutate(YOUNG = rowSums(.\\[3:6\\]) + rowSums(.\\[12\\])) | -   **mutate(YOUNG = ...)**: add new column 'YOUNG' to dataset                   |\n|                                                      |                                                                                  |\n|                                                      | -   **rowSums(.\\[3:6\\])**: calculate sum of values across column 3 to 6 each row |\n|                                                      |                                                                                  |\n|                                                      | -   **rowSums(.\\[12\\])**: return only column 12 value                            |\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n\n```{r}\npopdata2020\n```\n\n#### 2.5.2 **Joining Geospatial Data and Attribute Data**\n\nBefore performing georelational join,\n\n-   convert values in PA & SZ fields to **UPPERCASE -**right now is both upper & lower case\n\n(SUBZONE_N and PLN_AREA_N are already in UPPERCASE)\n\n```{r}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n\n-   use **'left_join()'** from ***dplyr*** to merge geo data with the attribute table, matching them by the planning subzone names (like `SUBZONE_N` and `SZ`).\n\n```{r}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n\n(By using `mpsz` as the starting point (the left table), we make sure that the result keeps all the special geographic information (like shapes and locations) from `mpsz`.)\n\n## 3.0 **Choropleth Mapping Geospatial Data Using *tmap***\n\nChoropleth mapping is a way to show information on a map using colors or patterns for different areas like countries or states. For example, a researcher might use this type of map to show where older people live in Singapore based on specific zones.\n\nTo create these maps with the `tmap` package, you can:\n\n1.  **Use `qtm()`** \\> Plot a thematic map.\n\n2.  **Use `tmap` elements** -\\> Plot a more detailed and customized map.\n\n#### 3.1 Plot with qtm()\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\n```{r}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\",\n    fill.palette =\"plasma\")\n```\n\ntmap_mode(\"plot\") -\\> produce static map\n\ntmap_mode(\"view\") -\\> interactive mode\n\nfill = \"DEPENDENCY\" -\\> use this attribute to determine color fill for each polygon(area) on the map\n\n#### 3.2 Usage of tmap's element\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n#### 3.3 Drawing a base map\n\n```{r}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\nStart with *tm_shape()* -\\> data to use for map\n\n*tm_fill()* and *tm_polygons()* -\\> add details\n\n#### 3.4 Drawing a choropleth map using *tm_polygons()*\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n**Default**: Missing Value(grey), Color scheme of ColorBrewer(`YlOrRd`), Interval binning(pretty)\n\n#### 3.5 Drawing a choropleth map using *tm_fill() and tm_border()*\n\n*m_polygons()* is a wraper of *tm_fill()* and *tm_border()*. \n\n*tm_fill()* -\\> shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n*\\* planning subzones are shared according to the respective dependecy values*\n\n*tm_borders()*-\\> add boundary of the planning subzones\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\nalpha -\\> transparency no. between 0 (totally transparent) and 1 (not transparent) \\[Default = 1\\]\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. default is 1\n\n-   *lty* = border line type. default is “solid”.\n\n## 4.0 **Data classification methods of tmap**\n\n10 methods: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\n\\* Need to put style arg in tm_fill() or tm_polygons()\n\n#### 4.1.0 style = \"quantile\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n'**quantile**' are more evenly distributed than \"**equal**\"\n\n#### 4.1.1 style = \"equal\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.2 style = \"sd\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.3 style = \"pretty\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.4 style = \"kmeans\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.5 style = \"hclust\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.6 style = \"bclust\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.7 style = \"fisher\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.8 style = \"jenks\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n## 5.0 **Plotting Choropleth Maps with Custom Breaks**\n\nFor built-in styles, the map automatically determines the category breaks.\n\nManual -\\> use **breaks** argument in **tm_fill()**, in **tmap** (need specify **n+1** values for **n** categories in ascending order, because each break range includes a min & max)\n\nCurrently,\n\n```{r}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a min and max, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n## 6.0 **Colour Scheme**\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### 6.1 Using ColourBrewer palette\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\nTo reverse the colour shading, add a “-” prefix.\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n## 7.0 Map Layouts\n\neg. Title, scale bar, compass, margins, aspects ratios\n\n#### 7.1 Map Legend\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n#### 7.2 Map Style (tmap_style)\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n#### 7.3 Cartographic Furniture\n\nAdding compass, scale bar, grid\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\nTo reset the default style\n\n```{r}\ntmap_style(\"white\")\n```\n\n#### 7.4 **Drawing Small Multiple Choropleth Maps**\n\nSmall multiple maps (a.k.a **facet map**)\n\nEnable the visualisation of how spatial relationships change with respect to another variable, such as time\n\nPlotted in 3 ways:\n\n-   assigning multiple values to \\>= 1 asthetic arguments\n\n-   defining a group-by variable in *tm_facets()*\n\n-   creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **`tm_fill()`**\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\nDifferent color:\n\n```{r}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\nGroup By using **tm_facets()**:\n\n```{r}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\nStand-alone maps using **tmap_arrange()**:\n\n```{r}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n#### 7.4 **Mapping Spatial Object Meeting a Selection Criterion**\n\n```{r}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n","srcMarkdownNoYaml":"\n\n## 1.0 Overview -Thematic Map\n\nDisplay info about a topic/theme on a geographic location leveraging our spatial cognition & vision systems\n\n**Usage exmaples**\n\n-   Visualize population, temperature, crime rates, property prices using symbols\n\n**Objective**\n\n-   Plot functional & truthful choropleth maps using **`tmap`** packages\n\n**Outcome**![](https://is415-geospatial-with-khant.netlify.app/hands-on_ex/images/example.png)\n\n## 2.0 Setup\n\n### **2.1 Installing R-Packages**\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) package\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data\n\n*\\* Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.* `[Only need to install tidyverse]`\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\n```{r}\npacman::p_load(sf, tmap, tidyverse)\n```\n\n### **2.2 Data Acquisition**\n\n2 datasets will be used:\n\n-   URA Master Plan 2014 Subzone Boundary (Web) -(i.e. [MP14_SUBZONE_WEB_PL](https://beta.data.gov.sg/datasets/d_d14da225fccf921049ab64238ff473d9/view)) in ESRI shapefile format\n    -   geographical boundary of Singapore at the planning subzone level\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 -(i.e. [respopagesextod2011to2020.csv](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)) in csv format\n    -   aspatial data file\n    -   Does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n### 2.3 **Importing Geospatial Data into R**\n\n-   **Import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`**\n\n```{r}\nmpsz = st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\",                 \n               layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n-   Examine content of mpsz\n\n```{r}\nmpsz\n```\n\n*\\* Why show 10 only? -\\> Ans: By default, only show a subset of data.*\n\n-   Use print(mpsz, n=20) -\\> show 20 data\n\n### 2.4 **Importing Aspatial Data into R**\n\n-   **Import `Population` data**\n\n```{r}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n\n### 2.5 **Data Preparation and Wrangling**\n\nTo create a thematic map, first, gather a data table for the year 2020. This table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY.\n\n-   **YOUNG**: age group 0 to 4 until age group 20 to 24,\n\n-   **ECONOMY ACTIVE**: age group 25-29 until age group 60-64,\n\n-   **AGED**: age group 65 and above,\n\n-   **TOTAL**: all age group, and\n\n-   **DEPENDENCY**: the ratio between young and aged against economy active group\n\n#### 2.5.1 Data Wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   `pivot_wider()` *of **tidyr package***\n\n    | ![](images/clipboard-897745879.png){width=\"110\"} -\\> ![](images/clipboard-2883912261.png){width=\"240\"}\n\n-   `mutate()`, `filter()`, `group_by()` and `select()` of ***dplyr package***\n\n```{r}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n| filter                                               | only take Time == 2020                                                           |\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n| mutate                                               | calculation                                                                      |\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n| mutate(YOUNG = rowSums(.\\[3:6\\]) + rowSums(.\\[12\\])) | -   **mutate(YOUNG = ...)**: add new column 'YOUNG' to dataset                   |\n|                                                      |                                                                                  |\n|                                                      | -   **rowSums(.\\[3:6\\])**: calculate sum of values across column 3 to 6 each row |\n|                                                      |                                                                                  |\n|                                                      | -   **rowSums(.\\[12\\])**: return only column 12 value                            |\n+------------------------------------------------------+----------------------------------------------------------------------------------+\n\n```{r}\npopdata2020\n```\n\n#### 2.5.2 **Joining Geospatial Data and Attribute Data**\n\nBefore performing georelational join,\n\n-   convert values in PA & SZ fields to **UPPERCASE -**right now is both upper & lower case\n\n(SUBZONE_N and PLN_AREA_N are already in UPPERCASE)\n\n```{r}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n\n-   use **'left_join()'** from ***dplyr*** to merge geo data with the attribute table, matching them by the planning subzone names (like `SUBZONE_N` and `SZ`).\n\n```{r}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n\n(By using `mpsz` as the starting point (the left table), we make sure that the result keeps all the special geographic information (like shapes and locations) from `mpsz`.)\n\n## 3.0 **Choropleth Mapping Geospatial Data Using *tmap***\n\nChoropleth mapping is a way to show information on a map using colors or patterns for different areas like countries or states. For example, a researcher might use this type of map to show where older people live in Singapore based on specific zones.\n\nTo create these maps with the `tmap` package, you can:\n\n1.  **Use `qtm()`** \\> Plot a thematic map.\n\n2.  **Use `tmap` elements** -\\> Plot a more detailed and customized map.\n\n#### 3.1 Plot with qtm()\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\n```{r}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\",\n    fill.palette =\"plasma\")\n```\n\ntmap_mode(\"plot\") -\\> produce static map\n\ntmap_mode(\"view\") -\\> interactive mode\n\nfill = \"DEPENDENCY\" -\\> use this attribute to determine color fill for each polygon(area) on the map\n\n#### 3.2 Usage of tmap's element\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n#### 3.3 Drawing a base map\n\n```{r}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\nStart with *tm_shape()* -\\> data to use for map\n\n*tm_fill()* and *tm_polygons()* -\\> add details\n\n#### 3.4 Drawing a choropleth map using *tm_polygons()*\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n**Default**: Missing Value(grey), Color scheme of ColorBrewer(`YlOrRd`), Interval binning(pretty)\n\n#### 3.5 Drawing a choropleth map using *tm_fill() and tm_border()*\n\n*m_polygons()* is a wraper of *tm_fill()* and *tm_border()*. \n\n*tm_fill()* -\\> shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n*\\* planning subzones are shared according to the respective dependecy values*\n\n*tm_borders()*-\\> add boundary of the planning subzones\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\nalpha -\\> transparency no. between 0 (totally transparent) and 1 (not transparent) \\[Default = 1\\]\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. default is 1\n\n-   *lty* = border line type. default is “solid”.\n\n## 4.0 **Data classification methods of tmap**\n\n10 methods: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\n\\* Need to put style arg in tm_fill() or tm_polygons()\n\n#### 4.1.0 style = \"quantile\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n'**quantile**' are more evenly distributed than \"**equal**\"\n\n#### 4.1.1 style = \"equal\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.2 style = \"sd\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.3 style = \"pretty\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.4 style = \"kmeans\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.5 style = \"hclust\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.6 style = \"bclust\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.7 style = \"fisher\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n#### 4.1.8 style = \"jenks\"\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n## 5.0 **Plotting Choropleth Maps with Custom Breaks**\n\nFor built-in styles, the map automatically determines the category breaks.\n\nManual -\\> use **breaks** argument in **tm_fill()**, in **tmap** (need specify **n+1** values for **n** categories in ascending order, because each break range includes a min & max)\n\nCurrently,\n\n```{r}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a min and max, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n## 6.0 **Colour Scheme**\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### 6.1 Using ColourBrewer palette\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\nTo reverse the colour shading, add a “-” prefix.\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n## 7.0 Map Layouts\n\neg. Title, scale bar, compass, margins, aspects ratios\n\n#### 7.1 Map Legend\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n#### 7.2 Map Style (tmap_style)\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n#### 7.3 Cartographic Furniture\n\nAdding compass, scale bar, grid\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\nTo reset the default style\n\n```{r}\ntmap_style(\"white\")\n```\n\n#### 7.4 **Drawing Small Multiple Choropleth Maps**\n\nSmall multiple maps (a.k.a **facet map**)\n\nEnable the visualisation of how spatial relationships change with respect to another variable, such as time\n\nPlotted in 3 ways:\n\n-   assigning multiple values to \\>= 1 asthetic arguments\n\n-   defining a group-by variable in *tm_facets()*\n\n-   creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **`tm_fill()`**\n\n```{r}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\nDifferent color:\n\n```{r}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\nGroup By using **tm_facets()**:\n\n```{r}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\nStand-alone maps using **tmap_arrange()**:\n\n```{r}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n#### 7.4 **Mapping Spatial Object Meeting a Selection Criterion**\n\n```{r}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"Hands-on_Ex02.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"cosmo","title":"Hands-on Exercise 2","subtitle":"Thematic Mapping and GeoVisualisation with R","author":"Kai Feng","date":"August 24, 2024","date-modified":"last-modified"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}