---
title: "In-class Exercise 6 -Global and Local Measures of Spatial Autocorrelation: sfdep methods"
author: "kai feng"
date: "Sep 23, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# **1.0 Setup**

### 1.1 Installing R-Packages

*`sfdep`*:

-   creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep

-   utilizes list columns extensively to make this interface possible.

```{r}
pacman::p_load(sf, sfdep, spdep, tmap, tidyverse)
```

### 1.2 Data Acquisition

We will be using 2 sets of data:

-   Hunan, a geospatial data set in ESRI shapefile format, and

-   Hunan_2012, an attribute data set in csv format.

### 1.3 Importing Hunan data

::: panel-tabset
## Hunan shapefile

```{r}
hunan_sf <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan") 
```

## Hunan_2012 table

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
hunan2012
```
:::

### 1.4 Data Preparation and Wrangling

##### Joining Hunan and Hunan_2012

```{r}
hunan_GDPPC <- left_join(hunan_sf,hunan2012)%>%
  select(1:4, 7, 15)

hunan_GDPPC
```

### 1.5 Plot choropleth map

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC", 
          style = "quantile", 
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by county, Hunan Province",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)
```

<br/><br/>

# **2.0 Global Measures of Spatial Association**

### Step 1: Deriving Queen's Contiguity weights: sfdep methods

```{r}
wm_q <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)

print(wm_q)
```

::: callout-note
**style**:

-   default 'W' (row standardized weights, sums over all links to n)

-   can be 'B' (basic binary coding)

-   'C'(globally standardised, sums over all links to n)

-   'U' (equal C/no. of neighbours, sums over all all links to unity)

-   'minmax'

-   'S' (variance-stabilizing coding)

**allow_zero**: if true, assigns 0 as lagged value

**.before = 1** -\> place new data to front of table

**nb** -\> a neighbor list object
:::

### Global Moran's I

::: panel-tabset
## Computing Global Moran' I

```{r}
moranI <- global_moran(wm_q$GDPPC,
                       wm_q$nb,
                       wm_q$wt)

glimpse(moranI)
```

## Performing Global Moran's I test

```{r}
global_moran_test(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt)
```
:::

### Performing Global Moran'I permutation test

Using Monte carlo simulation

::: panel-tabset
## Step 1

```{r}
set.seed(1234)
```

## Step 2

```{r}
global_moran_perm(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt,
                  nsim = 99)
```

::: callout-note
P-value is smaller than alpha value of 0.05.

Have enough statistical evidence to reject null hypo that the spatial distribution of GPD per capita are resemble random distribution (i.e. independent from spatial)

Because the Moranâ€™s I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.
:::
:::

<br/><br/>

# **3.0 Local Measures of Spatial Association**

**LISA map**

-   shows outliers & clusters.

-   2 types of outliers (High-Low, Low-High)

-   2 types of cluster (High-High, Low-Low)

-   is an interpreted map **combining Local Moran's I & its respective P-value**

### Local Moran's I, P value, LISA

::: panel-tabset
## Computing Local Moran's I

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    GDPPC, nb, wt, nsim = 99),
    .before = 1) %>% 
  unnest(local_moran)
```

## Visualising Local Moran's I VS P-value

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of GDPPC",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

## Visualising LISA map

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```
:::

### Hot Spot & Cold Spot Area Analysis

::: panel-tabset
## Computing local Gi\* statistics

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(nb = include_self(
    st_contiguity(geometry)),
    wts = st_inverse_distance(nb, 
                              geometry, 
                              scale = 1,
                              alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    GDPPC, nb, wts, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

## Visualising Gi\*

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

## Visualising p-value of HCSA

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

## Visualising Hot Spot & Cold Spot (HCSA)

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of GDPPC",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)

```
:::

### Visualising hot spot and cold spot areas

```{r}
HCSA_sig <- HCSA  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("cluster") + 
  tm_borders(alpha = 0.4)
```
