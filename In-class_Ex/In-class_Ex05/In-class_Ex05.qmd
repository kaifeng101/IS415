---
title: "In-class Exercise 5 -"
author: "kai feng"
date: "Sep 16, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# Overview

xxx

# 1.0 Setup

### 1.1 Installing R-Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)
```

### 1.2 Data Acquisition

We will be using 2 sets of data:

### 1.3 Importing Hunan data

::: panel-tabset
## Hunan shapefile

```{r}
#| eval: false
hunan_sf <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan") 
```

## Hunan_2012 table

```{r}
#| eval: false
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
hunan2012
```
:::

# To save derived data:

```{r}
#| eval: false
write_rds(hunan_sf, "data/rds/hunan_sf.rds")
write_rds(hunan2012, "data/rds/hunan2012.rds")
```

# To read stored derived data:

```{r}
#| echo: false 
hunan_sf <- read_rds("data/rds/hunan_sf.rds")
hunan2012 <- read_rds("data/rds/hunan2012.rds")
```

::: callout-note
## Note

echo: false, will not print out
:::

### **1.4 Data Preparation and Wrangling**

##### Joining Hunan and Hunan_2012

```{r}
hunan_GDPPC <- left_join(hunan_sf,hunan2012, join_by(County))%>%
  select(1:4, 7, 15)

hunan_GDPPC
```

##### Converting to SpatialPolygonDataFrame

```{r}
hunan_sp <- hunan_GDPPC %>% 
  as_Spatial()
```

::: callout-note
## Note

Look at the difference between the data structure of sp and sf
:::

<br/><br/>

# 2.0 Determine fixed bandwidth

::: panel-tabset
## Cross-alidation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "CV",
                 adaptive = FALSE,
                 kernel = "bisquare",
                 longlat = T)

bw_CV
```

## AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "AIC",
                 adaptive = FALSE,
                 kernel = "bisquare",
                 longlat = T)
bw_AIC
```
:::

# 3.0 Determine adaptive bandwidth

::: panel-tabset
## Cross-Validation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "CV",
                 adaptive = TRUE,
                 kernel = "bisquare",
                 longlat = T)

bw_CV
```

## AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "AIC",
                 adaptive = TRUE,
                 kernel = "bisquare",
                 longlat = T)
bw_AIC
```
:::

::: callout-note
## Note

Fixed distance = will be in km,

the neighbors are the same for CV and AIC
:::

::: callout-note
## Note

Fixed bandwidth: adaptive = False

Adaptive bandwidth: adaptive = True
:::

<br/><br/>

# 4.0 Geographically Weighted Summary Statistics with Adaptive bandwidth

```{r}
gwstat <- gwss(data=hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

# 5.0 Extract the data from gwstat

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

::: callout-note
## Note

cbind() to append the newly derived data.frame onto hunan_sf sf data.frame
:::

# 6.0 Visualising geographically weighted summary statistics

```{r}
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically weighted mean",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.text.size = 0.5,
            legend.height = 1.50,
            legend.width = 1.50,
            frame = TRUE)
```
