---
title: "In-class Exercise 9"
author: "kai feng"
date: "Oct 21, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# 1.0 Setup

### 1.1 Installing R-Packages

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)
```

### 1.2 Importing Shan data

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
shan_ict <- read_rds("data/rds/shan_ict.rds")
shan_sf_cluster <- read_rds("data/rds/shan_sf_cluster.rds")
```

<br/><br/>

# 2.0 Conventional Hierarchical Clustering

::: panel-tabset
## Step 1: Hierarchical Clustering

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
hclust_ward <- hclust(proxmat, method = 'ward.D')
groups <- as.factor(cutree(hclust_ward, k=6))
```

## Step 2: Append to the geospatial data

```{r}
shan_sf_cluster <- cbind(shan_sf,
                         as.matrix(groups)) %>% 
  rename('CLUSTER'='as.matrix.groups.') %>% 
  select(-c(3:4, 7:9)) %>% 
  rename(TS = TS.x)
```

### Step 3: The Dendrogram

```{r}
plot(hclust_ward, cex=0.6)
rect.hclust(hclust_ward, k=6, border=2.5)
```

## Step 4: Cluster map

```{r}
qtm(shan_sf_cluster, "CLUSTER")
```
:::

## 3.0 Spatially Constrained Clustering: SKATER method

::: panel-tabset
## Step 1: Computing nearest neighbours

```{r}
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```

## Step 2: Visualising the neighbours

```{r}
plot(st_geometry(shan_sf),
     border=grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb,
     pts,
     col="blue",
     add=TRUE)
```

## Step 3: Computing min spanning tree

```{r}
# Calculating edge cost
lcosts <-nbcosts(shan.nb, shan_ict)

# Incorporating these costs into a weights object
shan.w <- nb2listw(shan.nb,
                   lcosts,
                   style = "B")

summary(shan.w)

# Computing MST
shan.mst <- mstree(shan.w)

# Visualising MST
plot(st_geometry(shan_sf),
     border=gray(.5))
plot.mst(shan.mst,
         pts,
         col="blue",
         cex.lab=0.7,
         cex.circles=0.005,
         add=TRUE)
```
:::

## 4.0 Computing spatially constrained clusters using SKATER method

```{r}

skater.clust6 <- skater(edges = shan.mst[,1:2],
                        data = shan_ict,
                        method = "euclidean",
                        ncuts = 5)

plot(st_geometry(shan_sf),
     border=gray(.5))
plot(skater.clust6,
     pts,
     cex.lab=.7,
     groups.colors=c("red", "green", "blue", "brown", "pink"),
     cex.circles=0.005,
     add=TRUE)
```

## 5.0 Visualising the clusters in choropleth map

```{r}
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>% 
  rename('skater_CLUSTER'='as.factor.groups_mat.')
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

## 5.0 Spatially Constrained Clustering: ClustGeo Method

::: panel-tabset
## Step 1: Computing spatial distance matrix

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

## Step 2: The code

```{r}
cr <- choicealpha(proxmat, distmat,
                  range.alpha = seq(0, 1, 0.1),
                  K=6, graph = TRUE)
```

## Step 3: Saving clustGeo output

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2)
groups <- as.factor(cutree(clustG, k=6))
shan_sf_clustGeo <- cbind(shan_sf,
                          as.matrix(groups)) %>% 
  rename('clustGeo' = 'as.matrix.groups.')
```
:::

## 6.0 Visualising the clustGeo map

```{r}
qtm(shan_sf_clustGeo, "clustGeo")
```

## 7.0 Characterising the clusters

```{r}
ggparcoord(data = shan_sf_clustGeo,
           columns = c(17:21),
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) +
  theme(axis.text.x = element_text(angle = 30))
```

::: callout-note
Cluster 4 have a large variation for MPHONE_PR (long box plot)

-   Line = individual household (1 observation)

    -   more lines = more observation

We can even compare between groups, how each differs from each other

(eg. Radio_PR in 1st cluster have lesser variation compared to 2nd cluster Radio_PR)

If a lot of the line goes in parallel (eg. Cluster 4) then there is a lot of similarity
:::
