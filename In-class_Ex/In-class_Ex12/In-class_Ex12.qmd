---
title: "In-class Exercise 11 -Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method"
author: "kai feng"
date: "Nov 11, 2024"
date-modified: "last-modified"
execute:
  eval: false
  echo: true
  freeze: true
---

# 1.0 Setup

::: panel-tabset
## Installing R-packages

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, 
               tmap, rsample, yardstick, tidyverse,
               knitr, kableExtra, spatialRF)
```

## Importing Data

```{r}
mdata <- read_rds("data/rds/mdata.rds")
```

## Data Sampling

Calibrating predictive models are computational intensive, especially random forest method is used.

For quick prototyping, a 10% sample will be selected at random from the data.

```{r}
set.seed(1234)
HDB_sample <- mdata %>% 
  sample_n(1500)
```

## Checking of overlapping point

Check if there are overlapping point features.

```{r}
overlapping_points <- HDB_sample %>% 
  mutate(overlap = lengths(st_equals(., .)) > 1)
summary(overlapping_points$overlap)
```

## Spatial jitter

Move the point features by 5m to avoid overlapping point features

```{r}
HDB_sample <- HDB_sample %>% 
  st_jitter(amount = 5)
```

::: callout-note
When using GWmodel to calibrate explanatory or predictive models, it is very important to ensure that there are no overlapping point features
:::
:::

<br/><br/>

# 2.0 Data Sampling

The entire data are split into training and test data sets with 65% and 35% respectively by using *initial_split()* of **rsample** package. rsample is one of the package of tigymodels.

```{r}
set.seed(1234)

resale_split <- initial_split(HDB_sample,
                              prop = 6.67/10,)

train_data <- training(resale_split)
test_data <- testing(resale_split)

write_rds(train_data, "data/rds/train_data.rds")
write_rds(test_data, "data/rds/test_data.rds")
```

<br>

## 2.1 Multicollinearity check

In order to avoid multicollineariy. In the code chunk below, [`ggcorrmat()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of **ggstatsplot** is used to plot a correlation matrix to check if there are pairs of highly correlated independent variables.

```{r}
#| fig-width: 12
#| fig-height: 8

mdata_nogeo <- mdata %>% 
  st_drop_geometry()
ggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])
```

<br/><br/>

# 3.0 **Building a non-spatial multiple linear regression**

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
olsrr::ols_regress(price_mlr)
```

<br>

## 3.1 **Multicollinearity check with VIF**

```{r}
vif <- performance::check_collinearity(price_mlr)
kable(vif, 
      caption = "Variance Inflation Factor (VIF) Results") %>%
  kable_styling(font_size = 18) 
```

<br/><br/>

# 4.0 Predictive Modelling with gwr

::: panel-tabset
## Computing bw

```{r}
gwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

## Model calibration

```{r}
gwr_ad <- gwr.basic(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data,
                          bw=20, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)

gwr_ad
```

## Computing test data bw

```{r}
gwr_bw_test_ad <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=test_data,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

## Predicting with test data

```{r}
#| eval: false

gwr_pred <- gwr.predict(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data,
                          predictdata = test_data,
                          bw=20, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)

write_rds(gwr_pred, "data/rds/gwr_pred")
```

```{r}
gwr_pred = read_rds("data/rds/gwr_pred")

gwr_pred_df <- as.data.frame(
  gwr_pred$SDF$prediction) %>% 
  rename(gwr_pred = "gwr_pred$SDF$prediction")
```
:::

<br/><br/>

# 5.0 **Predictive Modelling with RF method**

::: panel-tabset
## Data Preparation

```{r}
# Extract exact coord of training & test data sets
coords <- st_coordinates(HDB_sample)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)

# drop the geometry column of both training and test data sets.
train_data_nogeom <- train_data %>% 
  st_drop_geometry()
```

## Calibrating RF model

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data_nogeom)

rf
```

## Preparing the test data

```{r}
test_data_nogeom <- cbind(
  test_data, coords_test) %>% 
  st_drop_geometry()
```

## Predicting with rf

```{r}
rf_pred <- predict(rf,
                   data = test_data_nogeom)
```

## Saving the predicted values

```{r}
rf_pred_df <- as.data.frame(rf_pred$predictions) %>% 
  rename(rf_pred = "rf_pred$predictions")
```
:::

<br/><br/>

# 6.0 Predictive Modelling with SpatialML

::: panel-tabset
## Determining Bandwidth

```{r}
set.seed(1234)
grd_bw_train_ad <- grf.bw(formula = resale_price ~ floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                            PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          dataset=train_data_nogeom, 
                          kernel="adaptive",
                          coords=coords_train)

write_rds(grd_bw_train_ad, "data/rds/grd_bw_train_ad.rds")
```

## Calibrating with grf

```{r}
#| eval: false

set.seed(1234)

grf_ad <- grf(formula = resale_price ~ floor_area_sqm + storey_order +
                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_data_nogeom, 
                     bw=20,
                     kernel="adaptive",
                     coords=coords_train)

write_rds(grf_ad, "data/rds/grf_ad.rds")
```

## Model Output

```{r}
read_rds("data/rds/grf_ad.rds")
```

## Preparing the test data

```{r}
test_data_nogeom <- cbind(
  test_data, coords_test) %>%
  st_drop_geometry()
```

## Predicting with the test data

```{r}
grf_pred <- predict.grf(grf_ad, 
                           test_data_nogeom, 
                           x.var.name="X",
                           y.var.name="Y", 
                           local.w=1,
                           global.w=0)

grf_pred_df <- as.data.frame(grf_pred)
```
:::

<br/><br/>

# 7.0 Model Comparison

::: panel-tabset
## Combining models' outputs

```{r}
test_data_pred <- test_data %>% 
  select(resale_price) %>% 
  cbind(gwr_pred_df) %>% 
  cbind(rf_pred_df) %>% 
  cbind(grf_pred_df)
```

## Transposing data

```{r}
test_longer <- test_data_pred %>% 
  st_drop_geometry() %>% 
  pivot_longer(cols = ends_with("pred"),
               names_to = "model",
               values_to = "predicted")
```

## Renaming

```{r}
model_labels <- c(
  gwr_pred = "gwr",
  rf_pred = "Random Forest",
  grf_pred = "gwRF"
)

test_longer <- test_longer %>% 
  mutate(model = recode(
    model, !!!model_labels
  ))
```

## Computing rmse

```{r}
rmse_results <- test_longer %>% 
  group_by(model) %>% 
  rmse(truth = resale_price,
       estimate = predicted) %>% 
  rename(rmse = .estimate) %>% 
  select(model, rmse)
```
:::

<br/><br/>

# 8.0 Visualise RMSE

::: panel-tabset
## Bar Chart

```{r}
ggplot(rmse_results,
       aes(x = reorder(model, rmse),
           y = rmse,
           fill = "skyblue")) +
  geom_bar(stat = "identity",
           fill = "skyblue",
           color = "black",
           width = 0.7) +
  labs(title = "RMSE Comparison of Model",
       y = "RMSE",
       x = "Model") +
  theme_minimal()
```

## Scatter Plots

```{r}
test_longer <- test_longer %>% 
  left_join(rmse_results,
            by = "model")
  
ggplot(data = test_longer,
       aes(x = predicted,
           y = resale_price)) +
  facet_wrap(~ model) +
  geom_point() +
  geom_text(data = test_longer,
            aes(x = Inf, y = Inf,
                label = paste("RMSE:", round(2))),
            hjust = 1.1, vjust = 1.1,
            color = "black", size = 4)
```
:::

<br />

## Variable Importance

::: panel-tabset
## Preparing the output

```{r}
var_imp <- data.frame(
  Variable = names(grf_ad$Global.Model$variable.importance),
  Importance = grf_ad$Global.Model$variable.importance
)
```

## The plot

```{r}
ggplot(var_imp, aes(x = reorder(Variable,
                                Importance),
                    y = Importance)) +
  geom_bar(stat = "identity",
           fill = "skyblue") +
  coord_flip() +
  labs(
    title = "Variable Importance from Ranger Model",
    x = "Variables",
    y = "Importance"
  ) +
  theme_minimal()
```
:::
