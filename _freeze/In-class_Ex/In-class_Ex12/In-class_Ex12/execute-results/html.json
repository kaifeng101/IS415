{
  "hash": "8bbea0dc02a03359e1a45fd86ceff802",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 11 -Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method\"\nauthor: \"kai feng\"\ndate: \"Nov 11, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: false\n  echo: true\n  freeze: true\n---\n\n\n# 1.0 Setup\n\n### 1.1 Installing R-Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, yardstick, tidyverse,\n               knitr, kableExtra, spatialRF)\n```\n:::\n\n\n### 1.2 Importing data\n\n::: panel-tabset\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/rds/mdata.rds\")\n```\n:::\n\n:::\n\n### 1.3 Data Sampling\n\nCalibrating predictive models are computational intensive, especially random forest method is used.\n\nFor quick prototyoing, a 10% sample will be selected at random from the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nHDB_sample <- mdata %>% \n  sample_n(1500)\n```\n:::\n\n\n### 1.4 Checking of overlapping point\n\nCheck if there are overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>% \n  mutate(overlap = lengths(st_equals(., .)) > 1)\nsummary(overlapping_points$overlap)\n```\n:::\n\n\n### 1.5 Spatial jitter\n\nMove the point features by 5m to avoid overlapping point features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>% \n  st_jitter(amount = 5)\n```\n:::\n\n\n### 1.6 Data Sampling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nresale_split <- initial_split(HDB_sample,\n                              prop = 6.67/10,)\n\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\nwrite_rds(train_data, \"data/rds/train_data.rds\")\nwrite_rds(test_data, \"data/rds/test_data.rds\")\n```\n:::\n\n\n### 1.7 Multicollinearity check\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>% \n  st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n:::\n\n\n### 1.8 Predictive Modelling with gwr\n\n::: panel-tabset\n## Computing bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n## Model calibration\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw=20, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n## Model Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad\n```\n:::\n\n\n## Computing test data bw\n\n\n::: {.cell}\n\n:::\n\n\n## Predicting with test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          predictdata = test_data,\n                          bw=20, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\nwrite_rds(gwr_pred, \"data/rds/gwr_pred\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred = read_rds(\"data/rds/gwr_pred\")\n\ngwr_pred_df <- as.data.frame(\n  gwr_pred$SDF$prediction) %>% \n  rename(gwr_pred = \"gwr_pred$SDF$prediction\")\n```\n:::\n\n:::\n\n### Predictive Modelling with Random Forest method\n\n::: panel-tabset\n## Data Preparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\ntrain_data_nogeom <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n## Calibrating RF model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\n```\n:::\n\n\n## Model Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf\n```\n:::\n\n\n## Preparing the test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(\n  test_data, coords_test) %>% \n  st_drop_geometry()\n```\n:::\n\n\n## Predicting with rf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rf,\n                   data = test_data_nogeom)\n```\n:::\n\n\n## Saving the predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>% \n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n:::\n\n## Predictive Modelling with SpatialML\n\n::: panel-tabset\n## Determining Bandwidth\n\n## Calibrating with grf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngrf_ad <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     bw=20,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\nwrite_rds(grf_ad, \"data/rds/grf_ad.rds\")\n```\n:::\n\n\n## Model Output\n\n## Preparing the test data\n\n## Predicting with the test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(grf_ad, \n                           test_data_nogeom, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n:::\n\n<br />\n\n## Model Comparison\n\n::: panel-tabset\n## Combining models' outputs\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- test_data %>% \n  select(resale_price) %>% \n  cbind(gwr_pred_df) %>% \n  cbind(rf_pred_df) %>% \n  cbind(grf_pred_df)\n```\n:::\n\n\n## Transposing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_data_pred %>% \n  st_drop_geometry() %>% \n  pivot_longer(cols = ends_with(\"pred\"),\n               names_to = \"model\",\n               values_to = \"predicted\")\n```\n:::\n\n\n## Renaming\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_labels <- c(\n  gwr_pred = \"gwr\",\n  rf_pred = \"Random Forest\",\n  grf_pred = \"gwRF\"\n)\n\ntest_longer <- test_longer %>% \n  mutate(model = recode(\n    model, !!!model_labels\n  ))\n```\n:::\n\n\n## Computing rmse\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_results <- test_longer %>% \n  group_by(model) %>% \n  rmse(truth = resale_price,\n       estimate = predicted) %>% \n  rename(rmse = .estimate) %>% \n  select(model, rmse)\n```\n:::\n\n:::\n\n## Visualise RMSE\n\n::: panel-tabset\n## Bar Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rmse_results,\n       aes(x = reorder(model, rmse),\n           y = rmse,\n           fill = \"skyblue\")) +\n  geom_bar(stat = \"identity\",\n           fill = \"skyblue\",\n           color = \"black\",\n           width = 0.7) +\n  labs(title = \"RMSE Comparison of Model\",\n       y = \"RMSE\",\n       x = \"Model\") +\n  theme_minimal()\n```\n:::\n\n\n## Scatter Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_longer %>% \n  left_join(rmse_results,\n            by = \"model\")\n  \nggplot(data = test_longer,\n       aes(x = predicted,\n           y = resale_price)) +\n  facet_wrap(~ model) +\n  geom_point() +\n  geom_text(data = test_longer,\n            aes(x = Inf, y = Inf,\n                label = paste(\"RMSE:\", round(2))),\n            hjust = 1.1, vjust = 1.1,\n            color = \"black\", size = 4)\n```\n:::\n\n:::\n\n<br />\n\n## Variable Importance\n\n::: panel-tabset\n## Preparing the output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_imp <- data.frame(\n  Variable = names(grf_ad$Global.Model$variable.importance),\n  Importance = grf_ad$Global.Model$variable.importance\n)\n```\n:::\n\n\n## The plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(var_imp, aes(x = reorder(Variable,\n                                Importance),\n                    y = Importance)) +\n  geom_bar(stat = \"identity\",\n           fill = \"skyblue\") +\n  coord_flip() +\n  labs(\n    title = \"Variable Importance from Ranger Model\",\n    x = \"Variables\",\n    y = \"Importance\"\n  ) +\n  theme_minimal()\n```\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}