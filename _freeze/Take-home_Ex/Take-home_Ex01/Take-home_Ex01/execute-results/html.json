{
  "hash": "22b116af25da70199a4c403babe80359",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar\"\nauthor: \"kai feng\"\ndate: \"Sep 2, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# Introduction\n\n**The Rise of Armed Conflict and the Potential of Geospatial Analytics**\n\n-   **Impact:** Millions of lives are shattered by armed conflict each year.\n\n-   **Trend:** Armed conflict has been on the rise since around 2012, reversing the decline from the 1990s and early 2000s.\n\n**Recent Major Conflicts:**\n\n1.  **Libya, Syria, and Yemen (post-2011):** Instabilities following the Arab uprisings.\n\n2.  **Sahel Region:** Crisis exacerbated by Libya's instability.\n\n3.  **Azerbaijan-Armenian War (2020):** Conflict over the Nagorno-Karabakh enclave.\n\n4.  **Ethiopia’s Tigray Conflict (2020):** Severe fighting in the northern region.\n\n5.  **Myanmar (2021):** Conflict following the military’s power grab.\n\n6.  **Russia-Ukraine War (2022):** Major assault by Russia on Ukraine.\n\n7.  **Sudan and Gaza (2023):** New devastating conflicts.\n\n-   **Current Situation:** The number of people affected—through death, displacement, or need for humanitarian aid—is higher than in decades.\n\n**This Geospatial Analytics will Focus on:**\n\n-   **Objective:** This study will use spatial point patterns analysis to explore the spatial and spatio-temporal distribution of armed conflict in Myanmar.\n\n-   **Potential:** Geospatial analytics offer tremendous potential to address complex societal problems, providing insights into the patterns and dynamics of conflict.\n\nSource: [10 Conflicts to Watch in 2024](https://www.crisisgroup.org/global/10-conflicts-watch-2024)\n\n<br/><br/>\n\n# 1.0 Setup\n\n### 1.1 **Installing R-Packages**\n\n::: panel-tabset\n## *Importing and Transforming Data*\n\n-   `sf`:\n\n    -   For handling spatial vector data and transforming it into simple features (`sf`) objects.\n\n    -   Functions like `st_read()` for importing spatial data and `st_transform()` for coordinate reference system transformations.\n\n-   `tidyverse`: For data manipulation and transformation, including functions for working with `tibble` data frames.\n\n-   `readr`: For reading in CSV or other text-based data files if needed.\n\n-   `dplyr`: provide data manipulation capabilities (eg. to group and summarize the relationships between these columns)\n\n## *Deriving Quarterly KDE Layers*\n\n-   `spatstat`: For kernel density estimation (KDE) and spatial point pattern analysis.\n\n-   `stars`: For working with raster data and creating raster-based KDE layers.\n\n-   `raster`: Additional functions for raster operations, if necessary.\n\n## *Performing 2nd-Order Spatial Point Patterns Analysis*\n\n-   `spatstat`: For analyzing second-order spatial point patterns, such as pair correlation functions.\n\n-   `ggplot2`: For visualizing the results of spatial analysis.\n\n## *Deriving Quarterly Spatio-Temporal KDE Layers*\n\n-   `spatstat`: For spatio-temporal point pattern analysis and creating spatio-temporal KDE layers.\n\n-   `stars`: For handling spatio-temporal raster data.\n\n## *Performing 2nd-Order Spatio-Temporal Point Patterns Analysis*\n\n-   `spatstat`: For advanced spatio-temporal analysis, including the study of second-order effects over time.\n\n## *Displaying Maps with KDE and Spatio-temporal KDE Layers*\n\n-   `tmap`: For creating thematic maps and displaying KDE layers.\n\n-   `ggplot2`: For additional custom visualizations if needed.\n\n-   `leaflet`: For interactive maps, if required.\n\n-   `osmdata`: To fetch and integrate OpenStreetMap data for background maps.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, readr, spatstat, raster, ggstatsplot, ggplot2, tmap, osmdata, dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInstalling package into 'C:/Users/ngkng/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nalso installing the dependencies 'proj4', 'crsmeta', 'PROJ', 'reproj'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'proj4' successfully unpacked and MD5 sums checked\npackage 'crsmeta' successfully unpacked and MD5 sums checked\npackage 'PROJ' successfully unpacked and MD5 sums checked\npackage 'reproj' successfully unpacked and MD5 sums checked\npackage 'osmdata' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\ngkng\\AppData\\Local\\Temp\\Rtmpm2Ey9M\\downloaded_packages\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nosmdata installed\n```\n\n\n:::\n:::\n\n\n<br/><br/>\n\n### 1.2 **Data Acquisition**\n\nWe will be using 2 sets of data:\n\n::: panel-tabset\n## Armed Conflict Data\n\n-   **Source:** [Armed Conflict Location & Event Data](https://acleddata.com/) (ACLED). ACLED is an independent, impartial international non-profit organization that collects data on violent conflict and protests worldwide.\n\n-   **Coverage:** Myanmar, from January 2021 to June 2024.\n\n-   **Event Types:** Focus on at least four main event types:\n\n    -   Battles\n\n    -   Explosion/Remote Violence\n\n    -   Strategic Developments\n\n    -   Violence Against Civilians\n\n-   **Study Period:** Quarterly armed conflict events from January 2021 to June 2024.\n\n## Administrative Boundary Data\n\n-   **Source:** [Myanmar Information Management Unit](https://geonode.themimu.info/layers/?limit=100&offset=0) (MIMU).\n-   For Broad Analysis:\n    -   **National Boundaries**: To get an overview of conflict patterns across the entire country.\n\n    -   **State and Region with Sub-region Boundaries**: For understanding conflict distribution across larger administrative divisions.\n-   For Detailed Local Analysis:\n    -   **District Boundaries**: Useful for a more detailed view of conflict distribution within specific districts.\n\n    -   **Township and Ward Boundaries**: For very granular analysis, especially useful if you're interested in the impact at the community level.\n-   **Self-Administered Region Boundaries:** For Analyzing Conflict Dynamics in Self-Administered Regions (SARs) Relative to Administrative Autonomy\n:::\n\n<br/><br/>\n\n### 1.3 **Importing Geospatial Data into R**\n\n::: panel-tabset\n## Armed Conflict Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/ACLED_Myanmar.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 51553 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## Administrative Boundaries\n\n-   For Broad Analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_boundaries <- st_read(dsn = \"data/National_Boundaries\", layer=\"mmr_polbnda_adm0_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm0_250k_mimu_1' from data source \n  `C:\\Users\\ngkng\\Desktop\\School\\Geo -Local\\Take-home_Ex\\Take-home_Ex01\\data\\National_Boundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nstate_region_subregion_boundaries <- st_read(dsn = \"data/State_And_Region_With_Sub-regions_Boundaries\", layer=\"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\Users\\ngkng\\Desktop\\School\\Geo -Local\\Take-home_Ex\\Take-home_Ex01\\data\\State_And_Region_With_Sub-regions_Boundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n-   For Detailed Local Analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistrict_boundaries <- st_read(dsn = \"data/District_Boundaries\", layer=\"mmr_polbnda_adm2_250k_mimu\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\Users\\ngkng\\Desktop\\School\\Geo -Local\\Take-home_Ex\\Take-home_Ex01\\data\\District_Boundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ntownship_boundaries <- st_read(dsn = \"data/Township_Boundaries\", layer=\"mmr_polbnda_adm3_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `C:\\Users\\ngkng\\Desktop\\School\\Geo -Local\\Take-home_Ex\\Take-home_Ex01\\data\\Township_Boundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nward_boundaries <- st_read(dsn = \"data/Ward_Boundaries\", layer=\"mmr_polbnda_adm5_mimu_v9_4\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm5_mimu_v9_4' from data source \n  `C:\\Users\\ngkng\\Desktop\\School\\Geo -Local\\Take-home_Ex\\Take-home_Ex01\\data\\Ward_Boundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1999 features and 15 fields (with 1 geometry empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.34521 ymin: 9.974381 xmax: 100.3662 ymax: 27.29535\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n-   Self-Administered region Boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nself_administered_boundaries <- st_read(dsn = \"data/Self_Administered_Region_Boundaries\", layer=\"mmr_polbnda_self_administered_zones_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_self_administered_zones_1' from data source \n  `C:\\Users\\ngkng\\Desktop\\School\\Geo -Local\\Take-home_Ex\\Take-home_Ex01\\data\\Self_Administered_Region_Boundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 94.5777 ymin: 19.74308 xmax: 99.56572 ymax: 27.37205\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n:::\n\n<br/><br/>\n\n### 1.4 **Checking Geospatial Data**\n\n::: panel-tabset\n## Armed Conflict Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n:::\n\n\n::: callout-note\nSince\n\n-   Since the class of **acled_sf** != sf object\n\n<!-- -->\n\n-   Coordinate Reference System of **acled_sf** = NA\n\nwe have to transform it.\n:::\n\n## Administrative Boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(national_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(national_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n<br/><br/>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(state_region_subregion_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(state_region_subregion_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n<br/><br/>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(district_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(district_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n<br/><br/>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(township_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(township_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n<br/><br/>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(ward_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(ward_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n<br/><br/>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(self_administered_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(self_administered_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n::: callout-note\nSince Coordinate Reference System of\n\n-   **national_boundaries**\n-   **state_region_subregion_boundaries**\n-   **district_boundaries**\n-   **township_boundaries**\n-   **ward_boundaries**\n-   **self_administered_boundaries**\n\nis in 4326 (unit of measurement = degree), we have to transform it\n:::\n:::\n\n<br/><br/>\n\n### 1.5 **Understanding the data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select relevant columns and group by disorder_type, event_type, sub_event_type\nrelated_types <- acled_sf %>%\n  dplyr::select(disorder_type, event_type, sub_event_type) %>%\n  group_by(disorder_type, event_type, sub_event_type) %>%\n  summarize(count = n(), .groups = 'drop')  # Count occurrences of each combination\nprint(related_types, n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 25 × 4\n   disorder_type                      event_type            sub_event_type count\n   <chr>                              <chr>                 <chr>          <int>\n 1 Demonstrations                     Protests              Peaceful prot…  8132\n 2 Demonstrations                     Protests              Protest with …   463\n 3 Demonstrations                     Riots                 Violent demon…    94\n 4 Political violence                 Battles               Armed clash    11770\n 5 Political violence                 Battles               Government re…     5\n 6 Political violence                 Battles               Non-state act…   274\n 7 Political violence                 Explosions/Remote vi… Air/drone str…  2646\n 8 Political violence                 Explosions/Remote vi… Chemical weap…     1\n 9 Political violence                 Explosions/Remote vi… Grenade          393\n10 Political violence                 Explosions/Remote vi… Remote explos…  5511\n11 Political violence                 Explosions/Remote vi… Shelling/arti…  3655\n12 Political violence                 Explosions/Remote vi… Suicide bomb       2\n13 Political violence                 Riots                 Mob violence      22\n14 Political violence                 Violence against civ… Abduction/for…   905\n15 Political violence                 Violence against civ… Attack          5257\n16 Political violence                 Violence against civ… Sexual violen…    63\n17 Political violence; Demonstrations Protests              Excessive for…   234\n18 Strategic developments             Strategic developmen… Agreement         10\n19 Strategic developments             Strategic developmen… Arrests         4833\n20 Strategic developments             Strategic developmen… Change to gro…  1346\n21 Strategic developments             Strategic developmen… Disrupted wea…   325\n22 Strategic developments             Strategic developmen… Headquarters …    67\n23 Strategic developments             Strategic developmen… Looting/prope…  4042\n24 Strategic developments             Strategic developmen… Non-violent t…    28\n25 Strategic developments             Strategic developmen… Other           1475\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Note!\n\nThe dataset includes non-conflict events such as:\n\n-   **\"Change to group/activity\"**\n\n-   **\"Agreement\"**\n\n-   **\"Headquarters or base established\"**\n\nAdditionally, it contains a sub-event category labeled **\"Other\"**. Including these non-conflict events under the general category of \"conflict nature\" may lead to biased or misleading interpretations. To ensure accurate and meaningful analysis, I recommend removing these non-conflict events from the dataset.\n:::\n\n<br/><br/>\n\n### 1.6 **Data Preparation and Wrangling**\n\n::: panel-tabset\n## Armed Conflict Data\n\n##### Convert Data Frame to `sf` Object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\nclass(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n##### Transform Coordinate Reference System\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\n##### Convert Date Column to Date Format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate(event_date = dmy(event_date))\n```\n:::\n\n\n##### Eliminating Columns not used for analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf[, !(names(acled_sf) %in% c(\"event_id_cnty\", \"time_precision\", \"inter1\", \"inter2\", \"notes\", \"tags\"))]\n```\n:::\n\n\n##### Preparing Data for Quarterly KDE Analysis\n\n1.  Create a Quarter Column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate(quarter = paste0(\"Q\", quarter(event_date), \"-\", year(event_date)))\n```\n:::\n\n\n2.  Remove non-conflict data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnon_conflict_events <- c(\n  \"Change to group/activity\",\n  \"Agreement\",\n  \"Headquarters or base established\",\n  \"Other\"\n)\n\n# Filter out the non-conflict events from the dataset\nconflict_acled_sf_data <- acled_sf %>%\n  filter(!sub_event_type %in% non_conflict_events)\n```\n:::\n\n\n##### Adding a new analysis dimension: month\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconflict_acled_sf_data <- conflict_acled_sf_data %>%\n  mutate(month = month(event_date))\n```\n:::\n\n\n## Administrative Boundaries\n\n##### Transform the Coordinate Reference System of these:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_boundaries <- national_boundaries %>%\n  st_transform(crs = 32647)\n\nstate_region_subregion_boundaries <- state_region_subregion_boundaries %>%\n  st_transform(crs = 32647)\n\ndistrict_boundaries <- district_boundaries %>%\n  st_transform(crs = 32647)\n\ntownship_boundaries <- township_boundaries %>%\n  st_transform(crs = 32647)\n\nward_boundaries <- ward_boundaries %>%\n  st_transform(crs = 32647)\n\nself_administered_boundaries <- self_administered_boundaries %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\n##### Sample plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = state_region_subregion_boundaries) +\n  geom_sf() +\n  theme_minimal() +\n  labs(title = \"Map of Geometries\",\n       subtitle = \"Displaying multipolygon geometries\",\n       caption = \"Source: Example Data\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n:::\n\n<br/><br/>\n\n# 2.0 Exploratory Data Analysis\n\n### 2.1 Temporal Analysis: Frequency of Conflict Events Over Time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(conflict_acled_sf_data, aes(x = event_date)) +\n  geom_histogram(binwidth = 30, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Conflict Events Over Time\", x = \"Date\", y = \"Number of Events\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### 2.2 Event Type Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(conflict_acled_sf_data, aes(x = event_date, fill = event_type)) +\n  geom_histogram(binwidth = 30) +\n  labs(title = \"Event Types Over Time\", x = \"Date\", y = \"Number of Events\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### 2.3 Spatial Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot a choropleth of the conflict events by year using ggplot2\nggplot() +\n  geom_sf(data = national_boundaries, fill = \"lightgrey\") +\n  geom_sf(data = conflict_acled_sf_data, aes(color = event_type), size = 0.1, alpha = 0.6) +\n  facet_wrap(~year, ncol = 4) +  # Facet by year with 4 columns\n  labs(title = \"Spatial Distribution of Conflict Events by Year\", color = \"Event Type\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### 2.4 Conflict Hotspots by district\n\n##### 2.4.1 Preparing the hotspots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure the CRS of both datasets match\nconflict_acled_sf_data <- st_transform(conflict_acled_sf_data, crs = st_crs(district_boundaries))\n\n# Perform spatial join to add district information to the conflict dataset\nacled_with_districts <- st_join(conflict_acled_sf_data, district_boundaries, join = st_intersects)\n\n# Filter out rows where DT is NA before summarizing\nacled_with_districts <- acled_with_districts %>%\n  filter(!is.na(DT))\n\n# Group by district and summarize conflict data\nconflict_summary_by_district <- acled_with_districts %>%\n  group_by(DT) %>%\n  summarise(\n    total_conflicts = n(),\n    total_fatalities = sum(fatalities, na.rm = TRUE),\n    .groups = 'drop'\n  )\n\n# Convert district boundaries to a regular data frame (non-spatial)\ndistrict_boundaries_df <- as.data.frame(district_boundaries)\n\n# Merge the summary data with the district boundaries data frame\ndistrict_boundaries_summary <- district_boundaries_df %>%\n  left_join(conflict_summary_by_district, by = c(\"DT\" = \"DT\"))\n\n# Convert back to an sf object with geometry\ndistrict_boundaries_summary <- st_as_sf(district_boundaries_summary, crs = st_crs(district_boundaries))\n```\n:::\n\n\n##### 2.4.2 Plot the Hotspots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistrict_hotspot_tm <- tm_shape(district_boundaries_summary) +\n  tm_polygons(col = \"lightgrey\", border.col = \"black\") +\n  tm_shape(conflict_summary_by_district) +\n  tm_dots(col = \"total_conflicts\", palette = \"viridis\", size = 0.1, alpha = 0.6) +\n  tm_layout(\n    legend.position = c(\"left\", \"center\"),\n    legend.title.size = 0.9,\n    legend.text.size = 0.7,\n    frame = FALSE,\n    inner.margins = c(0, 0, 0, 0),  # Control inner margins within the map area\n    outer.margins = c(0, 0, 0, 0)  # Control outer margins around the map area\n  ) +\n  tm_facets(\n    by = c(\"DT\"),  # Facet by the DT and event_type variable\n    ncol = 5,  # Number of columns in the facet grid\n    free.scales = FALSE  # Use a common scale across all facets\n  )\n\nprint(district_hotspot_tm)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n<br/><br/>\n\n# 3.0 Deriving Quarterly KDE layers\n\n**Kernel Density Estimation (KDE)** provides a comprehensive view of where conflicts are occurring by visualizing the density of events across different quarters. By analyzing KDE on a quarterly basis, we can identify areas with high conflict intensity and gain insights into how the distribution of conflicts evolves over time. This approach helps in understanding temporal patterns and hotspots, offering a more detailed perspective on conflict dynamics.\n\nFor quarterly KDE layers:\n\n-   Subset data by quarter and compute KDE for each subset using `spatstat`\n\n::: callout-note\n## Note on Handling Duplicate Points\n\n**Duplicate points are removed in the analysis to avoid artificially inflating the density estimate.** Including duplicates could lead to an exaggerated representation of conflict hotspots, as each duplicate would incorrectly suggest multiple occurrences of the same event. By removing duplicates, we ensure that the Kernel Density Estimation (KDE) reflects the true intensity and distribution of distinct armed conflict events, providing a more accurate and reliable identification of hotspots.\n:::\n\n### 1. Create a list to store KDE for each quarter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_list <- list()\n```\n:::\n\n\n### 2. Get Unique Quarters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarters <- unique(conflict_acled_sf_data$quarter)\n```\n:::\n\n\n### 3. Loop Over Each Quarter and Filter Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loop over each quarter to process data\nfor (q in quarters) {\n  \n  # Filter the dataset for the current quarter\n  quarter_data <- acled_sf %>%\n    filter(quarter == q)\n}\n```\n:::\n\n\n### 4. Check for and Remove Duplicates\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loop over each quarter to process data\nfor (q in quarters) {\n  \n  # Filter the dataset for the current quarter\n  quarter_data <- conflict_acled_sf_data %>%\n    filter(quarter == q)\n  \n  # Extract spatial coordinates\n  coords <- st_coordinates(st_geometry(quarter_data))\n  \n  # Check for duplicates\n  if (any(duplicated(coords))) {\n    \n    # Remove duplicates\n    quarter_data <- quarter_data %>%\n      distinct(st_coordinates(st_geometry(.)), .keep_all = TRUE)\n  }\n}\n```\n:::\n\n\n### 5. Convert Filtered Data to a Spatial Point Pattern\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loop over each quarter to process data\nfor (q in quarters) {\n  \n  # Filter the dataset for the current quarter\n  quarter_data <- conflict_acled_sf_data %>%\n    filter(quarter == q)\n  \n  # Remove duplicates\n  coords <- st_coordinates(st_geometry(quarter_data))\n  if (any(duplicated(coords))) {\n    quarter_data <- quarter_data %>%\n      distinct(st_coordinates(st_geometry(.)), .keep_all = TRUE)\n  }\n  \n  # Convert the filtered data to a spatial point pattern (ppp object)\n  quarter_ppp <- as.ppp(st_geometry(quarter_data), W = as.owin(national_boundaries))\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 2 points were rejected as lying outside the specified window\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 1 point was rejected as lying outside the specified window\nWarning: 1 point was rejected as lying outside the specified window\nWarning: 1 point was rejected as lying outside the specified window\n```\n\n\n:::\n:::\n\n\n### 6. Perform Kernel Density Estimation (KDE)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loop over each quarter to process data\nfor (q in quarters) {\n  \n  # Filter the dataset for the current quarter\n  quarter_data <- conflict_acled_sf_data %>%\n    filter(quarter == q)\n  \n  # Remove duplicates\n  coords <- st_coordinates(st_geometry(quarter_data))\n  if (any(duplicated(coords))) {\n    quarter_data <- quarter_data %>%\n      distinct(st_coordinates(st_geometry(.)), .keep_all = TRUE)\n  }\n  \n  # Convert the filtered data to a spatial point pattern (ppp object)\n  quarter_ppp <- as.ppp(st_geometry(quarter_data), W = as.owin(national_boundaries))\n  \n  # Perform Kernel Density Estimation (KDE)\n  kde <- density(quarter_ppp, sigma = 0.1)  # Adjust sigma as needed for smoothness\n  \n  # Store KDE in the list\n  kde_list[[q]] <- kde\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 2 points were rejected as lying outside the specified window\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 1 point was rejected as lying outside the specified window\nWarning: 1 point was rejected as lying outside the specified window\nWarning: 1 point was rejected as lying outside the specified window\n```\n\n\n:::\n:::\n\n\n### 7. Plot the KDE for Each Quarter\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfcol=c(5, 3))\n# Plot the KDEs for all quarters\nfor (q in quarters) {\n  if (!is.null(kde_list[[q]])) {\n    plot(kde_list[[q]], main = paste(\"KDE for\", q))\n  } else {\n    print(paste(\"No KDE available for quarter:\", q))\n  }\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare a list to store tmap objects for each quarter\ntmap_list <- list()\n\n# Loop through each quarter\nfor (q in quarters) {\n  \n  # Filter the dataset for the current quarter\n  quarter_data <- conflict_acled_sf_data %>%\n    filter(quarter == q)\n  \n  # Remove duplicates\n  coords <- st_coordinates(st_geometry(quarter_data))\n  if (any(duplicated(coords))) {\n    quarter_data <- quarter_data %>%\n      distinct(st_coordinates(st_geometry(.)), .keep_all = TRUE)\n  }\n  \n  # Create a tmap visualization\n  tmap_plot <- tm_shape(national_boundaries) +\n    tm_polygons() +\n    tm_shape(quarter_data) +\n    tm_dots(size = 0.01, col = \"red\", title = \"Conflicts\") +\n    tm_layout(title = paste(\"Conflicts for\", q),\n              title.size = 1.2,\n              legend.outside = TRUE)\n  \n  # Store the tmap object in the list\n  tmap_list[[q]] <- tmap_plot\n}\n\n# Print all tmap plots\nfor (q in quarters) {\n  if (!is.null(tmap_list[[q]])) {\n    print(tmap_list[[q]])\n  } else {\n    print(paste(\"No data available for quarter:\", q))\n  }\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-14.png){width=672}\n:::\n:::\n\n\n# 3.0 Performing 2nd-Order Spatial Point Patterns Analysis\n\nNow, we will explore how armed conflict events are distributed and related.\n\n**Ripley’s K-function** is a useful tool for detecting whether events are clustered or spread out. It measures how the density of events changes with distance, helping to identify clustering or dispersion.\n\n**Whereas G-Function** examine the nearest-neighbor distances and understand how far apart the nearest events are.\n\n**F-Function** analyze the distribution of distances from a randomly chosen location to the nearest event\n\n#### **Computing K-Function Estimation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialize list to store K-function results\nkfunction_list <- list()\n\n# Get unique quarters from the dataset\nquarters <- unique(conflict_acled_sf_data$quarter)\n\n# Loop over each quarter to compute K-function\nfor (q in quarters) {\n  \n  # Filter the dataset for the current quarter\n  quarter_data <- conflict_acled_sf_data %>%\n    filter(quarter == q)\n  \n  # Remove duplicates\n  coords <- st_coordinates(st_geometry(quarter_data))\n  if (any(duplicated(coords))) {\n    quarter_data <- quarter_data %>%\n      distinct(st_coordinates(st_geometry(.)), .keep_all = TRUE)\n  }\n  \n  # Convert the filtered data to a spatial point pattern (ppp object)\n  quarter_ppp <- as.ppp(st_geometry(quarter_data), W = as.owin(national_boundaries))\n  \n  # Compute the K-function\n  kfunction <- Kest(quarter_ppp, correction = \"border\")\n  \n  # Store the K-function in the list\n  kfunction_list[[q]] <- kfunction\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 2 points were rejected as lying outside the specified window\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 1 point was rejected as lying outside the specified window\nWarning: 1 point was rejected as lying outside the specified window\nWarning: 1 point was rejected as lying outside the specified window\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Note\n\nRipley’s Correction: Provides a more sophisticated adjustment for edge effects by modifying the expected K-function, leading to potentially more accurate results in large areas. Border Correction: Simplifies the adjustment by extending the study area and is less computationally intensive but might be less accurate in areas with significant boundary effects.\n\nWe use correction = \"border\" rather than correction = \"Ripley\" for our analysis. Our primary goal is to observe the general distribution of conflict hotspots, which will guide more detailed follow-up studies. Given that our focus is on broad patterns rather than precise details, the simpler and less computationally intensive border correction is sufficient. While Ripley's correction offers more accuracy by adjusting for edge effects, it requires more computational resources and time, which we can afford to forego for this preliminary analysis.\n:::\n\n#### Plotting K-Function\n\n**Interpretation**:\n\n-   **Above the theoretical line**: Indicates clustering of points.\n\n-   **Below the theoretical line**: Suggests dispersion or regularity.\n\n-   **Close to the line**: Implies a random distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfcol=c(5, 3))\n# Plot the K-functions for all quarters\nfor (q in quarters) {\n  if (!is.null(kfunction_list[[q]])) {\n    # Plot K-function\n    plot(kfunction_list[[q]], . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\", main = paste(\"K-function for Quarter\", q))\n  } else {\n    print(paste(\"No K-function available for quarter:\", q))\n  }\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=960}\n:::\n:::\n\n\n# 4.0 Deriving Quarterly spatio-temporal KDE layers\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n# 5.0 Performing 2nd-Order Spatio-temporal Point Patterns\n\n# 6.0 KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nacled_sf %>% \n  filter(year == 2024 |\n           event_type == \"Polticial Violence\") %>% \n  tm_shape() +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}