---
title: "Notes 5"
subtitle: "Spatial Weights and Applications"
author: "Kai Feng"
date: "Sept 16, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

## Spatial Weights *(wij)*

-   A way to define spatial neighbourhood

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-6.jpg){width="375"}

::: callout-note
## Note

It measure from centroid!

Need to clean data properly. EG. If we only need to find the childcare in SG, we should remove the outer island, else u might see centroid being not in the center of where you expect it
:::

<br/><br/>

# Defining Spatial Weights

::: panel-tabset
## Adjacency Criterion

-   defines spatial weights based on if spatial units are physically contiguous or share a boundary or point of contact.

**Types:**

-   Rook's Case: Units share a common edge (horizontally or vertically).

-   Bishop's Case: Units share a corner (diagonally).

-   Queen's Case: Units share either an edge or a corner, encompassing both Rook’s and Bishop’s cases.

**Characteristics:**

-   Binary Matrix: weights are either 1 (adjacent) or 0 (not adjacent).

-   Straightforward and easy to interpret.

-   Applicability: Useful for grid-based data, like raster data or when spatial units are laid out in a regular pattern. Applications: Often used in grid-based spatial models and geographic information systems (GIS) where spatial units are aligned in a regular pattern.

![](images/clipboard-2503288394.png){width="588"}

## Distance Criterion

-   defines spatial weights based on the distance between spatial units. (calculate the distance between the centroids or the nearest boundaries of the units)

**Types:**

-   **Fixed Distance:** Weights are assigned based on whether the distance between units is less than a specified threshold. For instance, units within 10 kilometers might be assigned a weight of 1, while others get a weight of 0.

-   **Distance Decay:** Weights decrease with increasing distance, often following a specific functional form like the inverse of distance or a Gaussian function.

**Characteristics:**

-   **Continuous Matrix:** Results in a matrix where weights can vary continuously depending on the distance, not just a binary 1 or 0.

-   **Flexibility:** Can handle irregular patterns and non-grid-based data.

-   **Complexity:** Requires distance calculations and can be more computationally intensive.

**Applications:** Useful in analyses where spatial units are not uniformly distributed, such as in ecological studies or when analyzing spatial interactions over varying distances.

![](images/clipboard-3469777781.png){width="592"}

## General Spatial Distance weight matrices

-   it generalize the distance criterion by allowing for various forms of distance-based weighting and are not restricted to binary or simple fixed-distance schemes.

**Types:**

-   **Inverse Distance Weighting (IDW):** Weights are inversely proportional to the distance.

-   **Gaussian Weighting:** Weights are based on a Gaussian function of the distance.

-   **K-nearest Neighbors (KNN):** Weights are assigned to the k nearest neighbors of each unit. This can be used to ensure a fixed number of neighbors regardless of distance.

**Characteristics:**

-   **Versatility:** Can accommodate various forms of distance relationships and decay functions.

-   **Customizability:** Allows for fine-tuning of spatial relationships based on the specific needs of the analysis.

-   **Complexity:** Can involve more complex calculations and parameter tuning.

**Applications:** Suitable for a range of spatial models, including those needing flexible distance-weighting schemes or when the relationship between spatial units is not strictly binary.

![](images/clipboard-948209757.png){width="584"}
:::

<br/><br/>

# Contiguity Neighbours

-   Contiguity (common/shared boundary)

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-8.jpg){width="539"}

<br/><br/>

### Have 2nd, 3rd, 4th etc contiguity

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-18.jpg){width="435"}

<br/><br/>

### Weights matrix: 

::: panel-tabset
## Adjacency-based neighbours

Neighbour(s) of area 1202 using Rook case

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-9.jpg){width="476"}

::: callout-important
Do not include urself in the calculation
:::

## Distance-based neighbours

Weights matrix for d = 650

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-10.jpg){width="616"}

## Mesaured distance

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-11.jpg)

::: callout-note
Same as Distance-based neighbours, but inverse
:::
:::

::: callout-tip
### For Point, there is no boundary, it is shared
:::

<br/><br/>

# Row standardisation

In practice, we will use this instead of spatial weights

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-12.jpg){width="503"}

::: callout-note
Can use either row/col standardisation, it will give the same result
:::

# Applications of Spatial Weights

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-17.jpg){width="405"}

::: callout-note
You are calculating the avg weight of ur neighbours, excluding yourself
:::

### Spatially Lagged Variables

Spatial Lag with row-standardized weights

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-19.png){width="663"}

### Spatially Window Sum

-   uses and includes the diagonal element.

![](https://is415-ay2024-25t1.netlify.app/lesson/lesson05/img/image6-20.png){width="658"}

::: callout-important
Spatially Lagged Variables -\> exclude yourself

Spatially Window Sum -\> including yourself

With the diagram on the right, is easier to tell if there is a diff between GDP per capital between East & West \[processed data\]

**We can tell there is a spatial relationship,** not all the times we have
:::
