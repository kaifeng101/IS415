---
title: "Hands-on Exercise 5"
subtitle: "Spatial Weights and Applications"
author: "Kai Feng"
date: "Sept 13, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

## **1.0 Setup**

### **1.1 Installing R-Packages**

-   **sf**: Handles geospatial data, including points, lines, and polygons.

-   **readr**: Imports data from CSV files.

-   **dplyr**: Performs relational joins to merge datasets.

-   **spdep**: Computes spatial weights and calculates spatially lagged variables.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

<br/><br/>

### **1.2 Data Acquisition**

Two data sets will be used:

-   `Hunan county boundary layer`: a geospatial data set in ESRI shapefile format.

-   `Hunan_2012.csv`: contains selected Hunan’s local development indicators in 2012.

::: panel-tabset
# **Importing Geospatial Data**

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

# Importing Aspatial Data

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```
:::

<br/><br/>

## **2.0 Performing relational join**

update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe.

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

<br/><br/>

## **3.0 Visualising Regional Development Indicator**

Distribution of GDPPC 2012:

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

<br/><br/>

## **4.0 Computing Contiguity Spatial Weights**

-   Use `poly2nb()` from the `spdep` package to find neighboring regions.

-   The function creates a list of neighboring areas based on shared borders.

-   Can pass 'queen' as argument

    -   take TRUE (default)/FALSE

    -   if FALSE -\> return a list of 1st order neighbours using the Queen criteria

::: panel-tabset
# **Computing (QUEEN) contiguity based neighbours**

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

::: callout-note
## Explanation

-   Total 88 area units in Hunana.

-   Most connected area unit has 11 neighbours

-   2 area units with only 1 neighbour
:::

### To see the neighbours:

eg. in 1st polygon in the object

```{r}
wm_q[[1]]
```

::: callout-note
## Explanation

-   Polygon 1 has 5 neighbours.

-   The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.
:::

### To retrieve country name

```{r}
hunan$County[1]
```

### Reveal country names of the 5 neighbouring polygons

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

### Retrieve GDPPC of these 5 countries

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

### Display the complete weight matrix

```{r}
str(wm_q)
```

# **Creating (ROOK) contiguity based neighbours**

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

::: callout-note
## Explanation

Total 88 area units in Hunan.

Most connected area unit has 10 neighbours.

2 area units with only 1 neighbour
:::
:::

<br/><br/>

# **5.0 Visualising contiguity weights**

-   A connectivity graph connects each point to its neighbors with lines.

-   Since we're working with polygons, we'll first convert them to points using their centroids.

-   We need these centroids' coordinates in a separate data frame. Getting Latitude & Longitude of Polygon Centroids.

-   Use `st_centroid()` from the `sf` package to find the centroids of polygons in `us.bound`.

-   Apply `st_centroid()` to each element of the geometry column using the `map_dbl()` function from the `purrr` package.

-   To get longitude, use double bracket notation `[[]]` and index `1` to extract the longitude value from each centroid.

::: panel-tabset
# Get Longitude

map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

# Get Latitude

now use 2

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

# Get coords

Combine using `cbind`

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```
:::

### Plotting

::: panel-tabset
# Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

# Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
:::

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# **6.0** **Computing distance based neighbours**

using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package

-   identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.

-   If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

::: panel-tabset
# Determine the cut-off distance

determine the upper limit for distance band:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

::: callout-note
## Note

the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.
:::

# Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
str(wm_d62)
```

<br/><br/>

### Can display it this way too

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

# Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

::: callout-note
## Note

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.
:::

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

# Computing **adaptive distance weight matrix**

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

### Plotting distance based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
:::

<br/><br/>

# **7.0 Weights based on IDW (Inversed Distance)**

Compute the distances betweeen areas by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

# **8.0 Row-standardised Weights Matrix**

::: panel-tabset
# 

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

::: callout-note
## Note

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.
:::

# Weight of the 1st polygon’s 8 neighbors type

```{r}
rswm_q$weights[10]
```

::: callout-note
## Note

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.
:::

# Derive Row standardised distance weight matrix

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```
:::

<br/><br/>

# **9.0** **Application of Spatial Weight Matrix**

::: panel-tabset
# Spatial lag with row-standardized weights

### compute the average neighbor GDPPC value for each polygon (a.k.a **spatially lagged values**)

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

### retrieve GDPPC of these 5 countries:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

### append the spatially lag GDPPC values onto hunan sf data frame:

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

### Plot

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

# Spatial lag as a sum of neighboring values

Calculate this by assigning binary weights.

-   hve to go back to our neighbors list -\> apply function that will assign binary weights

-   then use glist to explicitly assign these weights

Start by applying a function that will assign a value of 1 per each neighbor. (Done with lappy)

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

### use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

### append the *lag_sum GDPPC* field into `hunan` sf data frame

```{r}
hunan <- left_join(hunan, lag.res)
```

### Plot

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

# Spatial window average

-   uses row-standardized weights and includes the diagonal element

    -   need to go back to the neighbors structure and add the diagonal element before assigning weights.

### Adding diagonal element to the neighbour list

```{r}
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

### Get weight

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

### Create the lag variable from our weight structure and GDPPC variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

### Convert the lag variable listw object into a data.frame

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

::: callout-note
## Note

The third command line on the code chunk above renames the field names of *lag_wm_q1.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.
:::

### **Next** append *lag_window_avg GDPPC* values onto *hunan* sf data.frame

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

### Compare the values of lag GDPPC and Spatial window average

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

### Plot

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

# Spatial window sum

It is the counter part of the window average, but without using row-standardized weights.

### Add the diagonal element to the neighbour list

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

### Assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

### Next, explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

### compute the lag variable with lag.listw()

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

### convert the lag variable listw object into a data.frame by using as.data.frame().

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

::: callout-note
## Note

The second command line on the code chunk above renames the field names of *w_sum_gdppc.res* object into *NAME_3* and *w_sum GDPPC* respectively.
:::

### append *w_sum GDPPC* values onto *hunan* sf data.frame

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

### compare the values of lag GDPPC and Spatial window average

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

### plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
:::
