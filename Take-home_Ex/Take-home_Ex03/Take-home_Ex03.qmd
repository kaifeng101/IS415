---
title: "Take-home Exercise 3: "
author: "kai feng"
date: "Oct 15, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# **Introduction**

## **Provincial Competitiveness Index in Vietnam**

**Context**: Vietnam's provinces exhibit varying levels of competitiveness, as captured by the **Provincial Competitiveness Index (PCI)**. This index evaluates critical dimensions that influence the investment climate and economic potential of each region.

**Challenges**: As different provinces seek to enhance their attractiveness for investment and business development, they face challenges related to **regional disparities** and the effectiveness of governance and infrastructure. Understanding the specific dimensions of PCI is essential for identifying competitive advantages and areas for improvement.

## **Key Trends**:

-   **Dimension Variation**: Provinces demonstrate diverse strengths and weaknesses across key PCI dimensions, such as **entry costs**, **land access**, **transparency**, **productivity**, and **labor training**. These variations directly impact the suitability of each province for different sectors.

-   **Sectoral Suitability**: The capacity of provinces to support various industries is influenced by the effectiveness of local policies and resources, which can lead to uneven development across sectors.

## **This Geospatial Analysis Will Focus on**:

**Objectives**: The primary aim of this analysis is to evaluate the individual dimensions of the **Provincial Competitiveness Index (PCI)** to assess their impact on the suitability of provinces for specific sectors, such as **manufacturing**, **services**, or **technology**.

## **Analysis Goals**:

-   **Dimension-Specific Clustering**: Utilize **Local Indicators of Spatial Association (LISA)** to explore how specific PCI dimensions contribute to clustering patterns, identifying which provinces excel in particular areas and why.

-   **Sectoral Recommendations**: Assess which provinces are best suited for specific industries based on their strengths in key PCI dimensions, offering insights into potential investment opportunities.

-   **Future Projections**: Apply predictive modeling techniques, including the **Mandell model**, to forecast trends in PCI dimensions over the coming years, providing insights into how these trends may influence sectoral suitability and competitiveness.

## **Significance**:

This project aims to provide a detailed analysis of how the **dimensions of the Provincial Competitiveness Index** shape the economic landscape of Vietnam. By focusing on specific PCI elements and their implications for sectoral suitability, this study will offer actionable insights for policymakers and businesses seeking to navigate Vietnam's diverse economic environment.

<br/><br/>

# **1.0 Setup**

## 1.1 Installing R-Packages

::: panel-tabset
## *Importing and Transforming Data*

-   `sf`:

    -   For handling spatial vector data and transforming it into simple features (`sf`) objects.

    -   Functions like `st_read()` for importing spatial data and `st_transform()` for coordinate reference system transformations.

-   `tidyverse`: For data manipulation and transformation, including functions for working with `tibble` data frames.

-   `readr`: For reading in CSV or other text-based data files if needed.

-   `dplyr`: provide data manipulation capabilities (eg. to group and summarize the relationships between these columns)

-   `arrow`: To read parquet files

## *Displaying Maps*

-   `tmap`: For creating thematic maps and displaying KDE layers.

-   `ggplot2`: For additional custom visualizations if needed.

-   *`scales`*: Transform the unit of measurement for coordinate

-   `animation, png, magick`: For animation work

## *Spatial Autocorrelation*

-   `sfdep`: For performing both local and global spatial autocorrelation analysis

## *Prediction*

-   `forecast`: For trend prediction
:::

```{r}
pacman::p_load(tidyverse, sf, readr, ggplot2, tmap, dplyr, animation, png, magick, openxlsx, readxl, sfdep, Kendall, forecast)
```

<br/>

## 1.2 Data Acquisition

We will be using these dataset:

::: panel-tabset
## Administrative Boundaries

-   **Source:** [Vietnam - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-vnm?) at HDX.
-   **Province Boundaries**:

## General Data

-   **Source:** [[Vietnam Statistics Office]{.underline}](https://www.gso.gov.vn/en/homepage/) , [Provincial Competitiveness Index](https://pcivietnam.vn/en)

-   **Provincial Competitiveness Index (PCI):** To evaluate the competitive environment of each province, identifying strengths and weaknesses that influence investment potential.

-   **Foreign Direct Investment (FDI):** To assess the attractiveness of provinces for foreign investors and identify trends in investment across different sectors.

-   **Gross Domestic Product (GDP):** Provide insights into the economic performance of each province, allowing for comparisons with PCI dimensions and investment trends.

-   **Industrial Production:** Analyzed to determine the output levels of various industries, revealing which sectors are thriving in relation to provincial competitiveness.
:::

<br/>

## 1.3 Data Preparation and Wrangling

::: panel-tabset
## Administrative Boundaries

```{r}
#| eval: false

provincial_boundaries <- st_read(dsn = "data/boundaries/provincial", layer="geoBoundaries-VNM-ADM1")
class(provincial_boundaries)
st_crs(provincial_boundaries)

provincial_boundaries <- provincial_boundaries %>%
  st_transform(crs = 3405) # Transform coordinate

# Drop & Rename column
provincial_boundaries <- provincial_boundaries %>% 
  select(shapeName, shapeISO, shapeGroup, geometry) %>% 
  rename(
    province_vn = shapeName,
    province_code = shapeISO,
    country_code = shapeGroup
  )

# Create a new column 'province_en' based on 'province_code'
provincial_boundaries <- provincial_boundaries %>%
  mutate(province_en = case_when(
    province_code == "VN-44" ~ "An Giang",
    province_code == "VN-43" ~ "BRVT",
    province_code == "VN-54" ~ "Bac Giang",
    province_code == "VN-53" ~ "Bac Kan",
    province_code == "VN-55" ~ "Bac Lieu",
    province_code == "VN-56" ~ "Bac Ninh",
    province_code == "VN-50" ~ "Ben Tre",
    province_code == "VN-31" ~ "Binh Dinh",
    province_code == "VN-57" ~ "Binh Duong",
    province_code == "VN-58" ~ "Binh Phuoc",
    province_code == "VN-40" ~ "Binh Thuan",
    province_code == "VN-59" ~ "Ca Mau",
    province_code == "VN-CT" ~ "Can Tho",
    province_code == "VN-04" ~ "Cao Bang",
    province_code == "VN-DN" ~ "Da Nang",
    province_code == "VN-33" ~ "Dak Lak",
    province_code == "VN-72" ~ "Dak Nong",
    province_code == "VN-71" ~ "Dien Bien",
    province_code == "VN-39" ~ "Dong Nai",
    province_code == "VN-45" ~ "Dong Thap",
    province_code == "VN-30" ~ "Gia Lai",
    province_code == "VN-SG" ~ "HCMC",
    province_code == "VN-03" ~ "Ha Giang",
    province_code == "VN-63" ~ "Ha Nam",
    province_code == "VN-HN" ~ "Ha Noi",
    province_code == "VN-23" ~ "Ha Tinh",
    province_code == "VN-61" ~ "Hai Duong",
    province_code == "VN-HP" ~ "Hai Phong",
    province_code == "VN-73" ~ "Hau Giang",
    province_code == "VN-14" ~ "Hoa Binh",
    province_code == "VN-66" ~ "Hung Yen",
    province_code == "VN-34" ~ "Khanh Hoa",
    province_code == "VN-47" ~ "Kien Giang",
    province_code == "VN-28" ~ "Kon Tum",
    province_code == "VN-01" ~ "Lai Chau",
    province_code == "VN-35" ~ "Lam Dong",
    province_code == "VN-09" ~ "Lang Son",
    province_code == "VN-02" ~ "Lao Cai",
    province_code == "VN-41" ~ "Long An",
    province_code == "VN-67" ~ "Nam Dinh",
    province_code == "VN-22" ~ "Nghe An",
    province_code == "VN-18" ~ "Ninh Binh",
    province_code == "VN-36" ~ "Ninh Thuan",
    province_code == "VN-68" ~ "Phu Tho",
    province_code == "VN-32" ~ "Phu Yen",
    province_code == "VN-24" ~ "Quang Binh",
    province_code == "VN-27" ~ "Quang Nam",
    province_code == "VN-29" ~ "Quang Ngai",
    province_code == "VN-13" ~ "Quang Ninh",
    province_code == "VN-25" ~ "Quang Tri",
    province_code == "VN-52" ~ "Soc Trang",
    province_code == "VN-05" ~ "Son La",
    province_code == "VN-26" ~ "TT-Hue",
    province_code == "VN-37" ~ "Tay Ninh",
    province_code == "VN-20" ~ "Thai Binh",
    province_code == "VN-69" ~ "Thai Nguyen",
    province_code == "VN-21" ~ "Thanh Hoa",
    province_code == "VN-46" ~ "Tien Giang",
    province_code == "VN-51" ~ "Tra Vinh",
    province_code == "VN-07" ~ "Tuyen Quang",
    province_code == "VN-49" ~ "Vinh Long",
    province_code == "VN-70" ~ "Vinh Phuc",
    province_code == "VN-06" ~ "Yen Bai"
  )) %>% 
  select (province_en, everything())

write_rds(provincial_boundaries, "data/rds/provincial_boundaries.rds")
```

::: callout-note
Since Coordinate Reference System of **provincial_boundaries**

is in 4326 (unit of measurement = degree), we have to transform it

Also, we need to have an english name for each province to allow us to map the province boundary with other dataset
:::

## General Data

```{r}
pci_2012 <- read_xlsx("data/provincial_competitiveness_index/2012.xlsx")
pci_2013 <- read_xlsx("data/provincial_competitiveness_index/2013.xlsx")
pci_2014 <- read_xlsx("data/provincial_competitiveness_index/2014.xlsx")
pci_2015 <- read_xlsx("data/provincial_competitiveness_index/2015.xlsx")
pci_2016 <- read_xlsx("data/provincial_competitiveness_index/2016.xlsx")
pci_2017 <- read_xlsx("data/provincial_competitiveness_index/2017.xlsx")
pci_2018 <- read_xlsx("data/provincial_competitiveness_index/2018.xlsx")
pci_2019 <- read_xlsx("data/provincial_competitiveness_index/2019.xlsx")
pci_2020 <- read_xlsx("data/provincial_competitiveness_index/2020.xlsx")
pci_2021 <- read_xlsx("data/provincial_competitiveness_index/2021.xlsx")
pci_2022 <- read_xlsx("data/provincial_competitiveness_index/2022.xlsx")
```

::: callout-note
Some datasets were inconsistent, so I created a new sheet called 'summary' and renamed the old one to 'summary - old'. The new sheet uses the XLOOKUP function for quick data population from the old sheet, which is much faster compared to handling it in R. In R, different sets of code would be required to manage various data types, making the process more time-consuming.
:::
:::

<br/><br/>

# **2.0 Importing the clean set of data**

```{r}
provincial_boundaries <- read_rds("data/rds/provincial_boundaries.rds")

```

<br/><br/>

# **3.0 Dimension-Specific Spatial Clustering (LISA)**

## Entry Cost

::: panel-tabset
## 2012

```{r}
image_read("data/rds/entry_cost/lisa__entry_cost_map_2012.png")
```

### **Deriving Queen’s Contiguity weights: sfdep methods**

```{r}
#| eval: false

entry_cost_2012 <- pci_2012 %>% 
  left_join(provincial_boundaries, by = "province_en") %>% 
  select(province_en, `Entry Costs`, geometry)
  

entry_cost_2012 <- st_as_sf(entry_cost_2012)
nb <- st_contiguity(entry_cost_2012$geometry)
wt <- st_weights(nb, style = "W", allow_zero = TRUE)

entry_cost_2012 <- entry_cost_2012 %>% 
  mutate(
    nb = nb,
    wt = wt,
    .before = 1
  )
```

### **Computing Local Moran’s I**

```{r}
#| eval: false

lisa_entry_cost_2012 <- entry_cost_2012 %>% 
  mutate(local_moran = local_moran(
    `Entry Costs`, nb, wt, nsim = 99, zero.policy = TRUE),
    .before = 1) %>% 
  unnest(local_moran)
```

### LISA Analysis

```{r}
#| eval: false

png("data/rds/entry_cost/lisa__entry_cost_map_2012.png", width = 1600, height = 1200)

lisa__entry_cost_sig_2012 <- lisa_entry_cost_2012  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")

tm_shape(lisa_entry_cost_2012) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa__entry_cost_sig_2012) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map 2012",   
            main.title.size = 2.5,              
            legend.text.size = 2.0,           
            legend.title.size = 2.7,         
            legend.position = c("right", "bottom"), 
            frame = TRUE)  # Add a frame around the map

# Close the graphic device
dev.off()
```

## 2013

```{r}
image_read("data/rds/entry_cost/lisa__entry_cost_map_2013.png")
```

### **Deriving Queen’s Contiguity weights: sfdep methods**

```{r}
#| eval: false

entry_cost_2013 <- pci_2013 %>% 
  left_join(provincial_boundaries, by = "province_en") %>% 
  select(province_en, `Entry Costs`, geometry)
  

entry_cost_2013 <- st_as_sf(entry_cost_2013)
nb <- st_contiguity(entry_cost_2012$geometry)
wt <- st_weights(nb, style = "W", allow_zero = TRUE)

entry_cost_2013 <- entry_cost_2013 %>% 
  mutate(
    nb = nb,
    wt = wt,
    .before = 1
  )
```

### **Computing Local Moran’s I**

```{r}
#| eval: false

lisa_entry_cost_2013 <- entry_cost_2013 %>% 
  mutate(local_moran = local_moran(
    `Entry Costs`, nb, wt, nsim = 99, zero.policy = TRUE),
    .before = 1) %>% 
  unnest(local_moran)
```

### LISA Analysis

```{r}
#| eval: false

png("data/rds/entry_cost/lisa__entry_cost_map_2013.png", width = 1600, height = 1200)

lisa__entry_cost_sig_2013 <- lisa_entry_cost_2013  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")

tm_shape(lisa_entry_cost_2013) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa__entry_cost_sig_2013) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map 2013",   
            main.title.size = 2.5,              
            legend.text.size = 2.0,           
            legend.title.size = 2.7,         
            legend.position = c("right", "bottom"), 
            frame = TRUE)  # Add a frame around the map

# Close the graphic device
dev.off()
```
:::
