---
title: "Take-home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar"
author: "kai feng"
date: "Sep 2, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# Introduction

**The Rise of Armed Conflict and the Potential of Geospatial Analytics**

-   **Impact:** Millions of lives are shattered by armed conflict each year.

-   **Trend:** Armed conflict has been on the rise since around 2012, reversing the decline from the 1990s and early 2000s.

**Recent Major Conflicts:**

1.  **Libya, Syria, and Yemen (post-2011):** Instabilities following the Arab uprisings.

2.  **Sahel Region:** Crisis exacerbated by Libya's instability.

3.  **Azerbaijan-Armenian War (2020):** Conflict over the Nagorno-Karabakh enclave.

4.  **Ethiopia’s Tigray Conflict (2020):** Severe fighting in the northern region.

5.  **Myanmar (2021):** Conflict following the military’s power grab.

6.  **Russia-Ukraine War (2022):** Major assault by Russia on Ukraine.

7.  **Sudan and Gaza (2023):** New devastating conflicts.

-   **Current Situation:** The number of people affected—through death, displacement, or need for humanitarian aid—is higher than in decades.

**This Geospatial Analytics will Focus on:**

-   **Objective:** This study will use spatial point patterns analysis to explore the spatial and spatio-temporal distribution of armed conflict in Myanmar.

-   **Potential:** Geospatial analytics offer tremendous potential to address complex societal problems, providing insights into the patterns and dynamics of conflict.

Source: [10 Conflicts to Watch in 2024](https://www.crisisgroup.org/global/10-conflicts-watch-2024)

<br/><br/>

# 1.0 Setup

### 1.1 **Installing R-Packages**

::: panel-tabset
## *Importing and Transforming Data*

-   `sf`:

    -   For handling spatial vector data and transforming it into simple features (`sf`) objects.

    -   Functions like `st_read()` for importing spatial data and `st_transform()` for coordinate reference system transformations.

-   `tidyverse`: For data manipulation and transformation, including functions for working with `tibble` data frames.

-   `readr`: For reading in CSV or other text-based data files if needed.

-   `dplyr`: provide data manipulation capabilities (eg. to group and summarize the relationships between these columns)

## *Mapping display*

-   `patchwork`: To arrange map layout

## *Deriving Quarterly KDE Layers*

-   `spatstat`: For kernel density estimation (KDE) and spatial point pattern analysis.

-   `stars`: For working with raster data and creating raster-based KDE layers.

-   `raster`: Additional functions for raster operations, if necessary.

## *Performing 2nd-Order Spatial Point Patterns Analysis*

-   `spatstat`: For analyzing second-order spatial point patterns, such as pair correlation functions.

-   `ggplot2`: For visualizing the results of spatial analysis.

-   `animation, png, magick`: For animation work

## *Deriving Quarterly Spatio-Temporal KDE Layers*

-   `spatstat`: For spatio-temporal point pattern analysis and creating spatio-temporal KDE layers.

-   `stars`: For handling spatio-temporal raster data.

## *Performing 2nd-Order Spatio-Temporal Point Patterns Analysis*

-   `spatstat`: For advanced spatio-temporal analysis, including the study of second-order effects over time.
:::

```{r}
pacman::p_load(tidyverse, sf, readr, spatstat, raster, ggstatsplot, ggplot2, tmap, dplyr, patchwork, animation, png, magick, osmdata, osrm, scales, MASS)
```

<br/><br/>

### 1.2 **Data Acquisition**

We will be using 2 sets of data:

::: panel-tabset
## Armed Conflict Data

-   **Source:** [Armed Conflict Location & Event Data](https://acleddata.com/) (ACLED). ACLED is an independent, impartial international non-profit organization that collects data on violent conflict and protests worldwide.

-   **Coverage:** Myanmar, from January 2021 to June 2024.

-   **Event Types:** Focus on at least four main event types:

    -   Battles

    -   Explosion/Remote Violence

    -   Strategic Developments

    -   Violence Against Civilians

-   **Study Period:** Quarterly armed conflict events from January 2021 to June 2024.

## Administrative Boundary Data

-   **Source:** [Myanmar Information Management Unit](https://geonode.themimu.info/layers/?limit=100&offset=0) (MIMU).
-   **National Boundaries**: To get an overview of conflict patterns across the entire country.
-   **State and Region with Sub-region Boundaries**: For understanding conflict distribution across larger administrative divisions.
:::

<br/><br/>

### 1.3 **Importing Geospatial Data into R**

::: panel-tabset
## Armed Conflict Data

```{r}
acled_sf <- read_csv("data/ACLED_Myanmar.csv")
```

## Administrative Boundaries

```{r}
national_boundaries <- st_read(dsn = "data/National_Boundaries", layer="mmr_polbnda_adm0_250k_mimu_1")

state_region_subregion_boundaries <- st_read(dsn = "data/State_And_Region_With_Sub-regions_Boundaries", layer="mmr_polbnda2_adm1_250k_mimu_1")
```
:::

<br/><br/>

### 1.4 **Checking Geospatial Data**

::: panel-tabset
## Armed Conflict Data

```{r}
class(acled_sf)
st_crs(acled_sf)
```

::: callout-note
Since

-   Since the class of **acled_sf** != sf object
-   Coordinate Reference System of **acled_sf** = NA

we have to transform it.
:::

## Administrative Boundaries

```{r}
class(national_boundaries)
st_crs(national_boundaries)
```

```{r}
class(state_region_subregion_boundaries)
st_crs(state_region_subregion_boundaries)
```

::: callout-note
Since Coordinate Reference System of

-   **national_boundaries**
-   **state_region_subregion_boundaries**

is in 4326 (unit of measurement = degree), we have to transform it
:::
:::

<br/><br/>

### 1.5 **Understanding the data**

```{r}
# Select relevant columns and group by disorder_type, event_type, sub_event_type
type_of_conflict <- acled_sf %>%
  dplyr::select(disorder_type, event_type, sub_event_type) %>%
  group_by(disorder_type, event_type, sub_event_type) %>%
  summarize(count = n(), .groups = 'drop')  # Count occurrences of each combination
print(type_of_conflict, n = Inf)
```

::: callout-note
## Note!

The dataset includes non-conflict events such as:

-   **"Change to group/activity"**

-   **"Agreement"**

-   **"Headquarters or base established"**

Additionally, it contains a sub-event category labeled **"Other"**. Including these non-conflict events under the general category of "conflict nature" may lead to biased or misleading interpretations. To ensure accurate and meaningful analysis, I recommend removing these non-conflict events from the dataset.
:::

<br/><br/>

### 1.6 **Data Preparation and Wrangling**

::: panel-tabset
## Armed Conflict Data

##### Convert Data Frame to `sf` Object

```{r}
acled_sf <- acled_sf %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

class(acled_sf)
```

##### Transform Coordinate Reference System

```{r}
acled_sf <- acled_sf %>%
  st_transform(crs = 32647)
```

##### Convert Date Column to Date Format

```{r}
acled_sf <- acled_sf %>%
  mutate(event_date = dmy(event_date))
```

##### Eliminating Columns not used for analysis

```{r}
acled_sf <- acled_sf[, !(names(acled_sf) %in% c("event_id_cnty", "time_precision", "inter1", "inter2", "notes", "tags"))]
```

##### Preparing Data for Quarterly KDE Analysis

1.  Create a Quarter Column

```{r}
acled_sf <- acled_sf %>%
  mutate(quarter = paste0("Q", quarter(event_date), "-", year(event_date)))
```

2.  Remove non-conflict data

```{r}
non_conflict_events <- c(
  "Change to group/activity",
  "Agreement",
  "Headquarters or base established",
  "Other"
)

# Filter out the non-conflict events from the dataset
conflict_acled_sf_data <- acled_sf %>%
  filter(!sub_event_type %in% non_conflict_events)
```

##### Adding a new analysis dimension: month

```{r}
conflict_acled_sf_data <- conflict_acled_sf_data %>%
  mutate(month = month(event_date))

write_rds(conflict_acled_sf_data, "data/rds/conflict_acled_sf_data.rds")
```

## Administrative Boundaries

##### Transform the Coordinate Reference System of these:

```{r}
national_boundaries <- national_boundaries %>%
  st_transform(crs = 32647)

state_region_subregion_boundaries <- state_region_subregion_boundaries %>%
  st_transform(crs = 32647)
```

##### Sample plot

```{r}
ggplot(data = state_region_subregion_boundaries) +
  geom_sf() +
  theme_minimal() +
  labs(title = "Map of Geometries",
       subtitle = "Displaying multipolygon geometries",
       caption = "Source: Example Data")
```
:::

<br/><br/>

# 2.0 Exploratory Data Analysis

### 2.1 Temporal Analysis: Frequency of Conflict Events Over Time

```{r}
ggplot(conflict_acled_sf_data, aes(x = event_date)) +
  geom_histogram(binwidth = 30, fill = "steelblue", color = "black") +
  labs(title = "Conflict Events Over Time", x = "Date", y = "Number of Events")
```

### 2.2 Event Type Distribution

```{r}
ggplot(conflict_acled_sf_data, aes(x = event_date, fill = event_type)) +
  geom_histogram(binwidth = 30) +
  labs(title = "Event Types Over Time", x = "Date", y = "Number of Events") +
  theme_minimal()

```

### 2.3 Spatial Analysis

```{r}
# Plot a choropleth of the conflict events by year using ggplot2
ggplot() +
  geom_sf(data = national_boundaries, fill = "lightgrey") +
  geom_sf(data = conflict_acled_sf_data, aes(color = event_type), size = 0.1, alpha = 0.6) +
  facet_wrap(~year, ncol = 4) +  # Facet by year with 4 columns
  labs(title = "Spatial Distribution of Conflict Events by Year", color = "Event Type") +
  theme_minimal() +
  theme(legend.position = "bottom") + 
  guides(color = guide_legend(override.aes = list(size = 1)))
```

::: callout-note
## ![](images/clipboard-890644755.png){width="22"}Insights

From 2021 to 2024, the conflicts in Myanmar have escalated significantly, evolving from largely peaceful protests to increasingly violent confrontations and armed battles.
:::

### 2.4 Conflict Hotspots by state & region

##### 2.4.1 Preparing the hotspots

```{r}
#| eval: true

# Ensure the CRS of both datasets match
conflict_acled_sf_data <- st_transform(conflict_acled_sf_data, crs = st_crs(state_region_subregion_boundaries))

# Perform spatial join to add state/region information to the conflict dataset
acled_with_state_region <- st_join(conflict_acled_sf_data, state_region_subregion_boundaries, join = st_intersects)

# Filter out rows where ST is NA before summarizing
acled_with_state_region <- acled_with_state_region %>%
  filter(!is.na(ST))

# Group by state/region and summarize conflict data
conflict_summary_by_state_region <- acled_with_state_region %>%
  group_by(ST, event_type, year) %>%
  summarise(
    total_conflicts = n(),
    total_fatalities = sum(fatalities, na.rm = TRUE),
    .groups = 'drop'
  )

# Convert state boundaries to a regular data frame (non-spatial)
state_region_boundaries_df <- as.data.frame(state_region_subregion_boundaries)

# Merge the summary data with the state boundaries data frame
state_region_boundaries_summary <- state_region_boundaries_df %>%
  left_join(conflict_summary_by_state_region, by = c("ST" = "ST"))

# Convert back to an sf object with geometry
state_region_boundaries_summary <- st_as_sf(state_region_boundaries_summary, crs = st_crs(state_region_subregion_boundaries))
```

##### 2.4.2 Plot the Hotspots

```{r}
#| fig-width: 10
#| fig-height: 15
#| eval: true

# Base map with state/region boundaries
state_region_hotspot_tm <- tm_shape(state_region_boundaries_summary) +
  tm_polygons(col = "lightgrey", border.col = "black") +
  
  # Overlay conflict data
  tm_shape(conflict_summary_by_state_region) +
  tm_dots(
    col = "event_type", 
    palette = "viridis", 
    size = "total_conflicts", 
    alpha = 0.6)  +
  
  # Layout adjustments
  tm_layout(
    frame = FALSE,  # Remove the frame around the plot
    legend.outside = TRUE,  # Keep the legend outside
    legend.outside.position = "bottom",  # Position the legend outside at the bottom
    legend.outside.size = 0.1,  # Adjust the size of the outside legend (reduce if too large)
  ) +
  
  # Faceting by state/region
  tm_facets(
    by = c("ST"),
    free.scales = FALSE  # Use a common scale across all facets
  )

print(state_region_hotspot_tm)
```

::: callout-note
## ![](images/clipboard-890644755.png){width="22"}Insights

This map illustrates conflict patterns across a four-year period, revealing significant regional variations. It highlights that certain states and regions experience relatively lower levels of conflict, indicating greater overall peace.

Conversely, other areas show higher concentrations of specific types of conflicts. This distribution helps identify regions with frequent conflict events and those more prone to particular conflict types, offering valuable insights into the geographical and thematic spread of conflicts.
:::

##### 2.4.3 Visualize by Event Type

```{r}
#| eval: true
# Define the conflict types
conflict_types <- c("Battles", "Protests", "Strategic developments", "Explosions/Remote violence", "Riots", "Violence against civilians")

# Initialize an empty list to store summaries
conflict_summaries <- list()

# Loop through each conflict type and summarize the data
for (type in conflict_types) {
  summary <- acled_with_state_region %>%
    filter(event_type == type) %>%
    group_by(ST) %>%
    summarise(
      total_events = n(),
      .groups = 'drop'
    )
  
  # Store the summary in the list with the conflict type as the key
  conflict_summaries[[type]] <- summary
}

# Convert state boundaries to a regular data frame (non-spatial)
state_region_subregion_boundaries_df <- as.data.frame(state_region_subregion_boundaries)

# Merge each summary with the state boundaries data frame
region_conflict_summaries <- lapply(conflict_summaries, function(summary) {
  region_summary <- state_region_subregion_boundaries_df %>%
    left_join(summary, by = "ST")
  
  # Convert back to an sf object with geometry
  st_as_sf(region_summary, crs = st_crs(state_region_subregion_boundaries))
})

# Rename the list elements for clarity
names(region_conflict_summaries) <- conflict_types
```

```{r}
#| fig-width: 10
#| fig-height: 20
#| eval: true
# Create a list to store plots
plots <- list()

# Loop through each conflict type to create a plot
for (type in conflict_types) {
  plots[[type]] <- tm_shape(region_conflict_summaries[[type]]) +
    tm_polygons(
      col = "total_events", 
      palette = "Reds", 
      title = paste("Number of", type),
      border.col = "black",
      style = "quantile"  # This divides the data into quantiles for better visualization
    ) +
    
    tm_text(
      text = "ST",  # Use the column name that contains the region names
      size = 0.6,        # Adjust the size as needed
      col = "black",     # Text color
      shadow = TRUE,    # Optional: Add shadow to make text more readable
      remove.overlap = TRUE  # Avoid text overlapping
    ) +
    
    tm_layout(
      frame = FALSE,  # Remove the frame around the plot
      legend.outside = TRUE,  # Keep the legend outside
      legend.outside.position = "right",  # Position the legend outside at the bottom
      legend.outside.size = 0.4  # Adjust the size of the outside legend (reduce if too large)
    ) +
    
    tm_legend(
      position = c("right", "bottom")  # Position the legend outside at the bottom
    )
}


# Arrange all plots in a single view using tm_arrange
combined_plot <- tmap_arrange(plots, ncol = 2, nrow = 3, 
                             legend.position = c("right", "bottom"), 
                             legend.outside = TRUE)

# Print the combined plot
print(combined_plot)
```

<br/><br/>

# 3.0 Deriving Quarterly KDE layers

**Kernel Density Estimation (KDE)** provides a comprehensive view of where conflicts are occurring by visualizing the density of events across different quarters. By analyzing KDE on a quarterly basis, we can identify areas with high conflict intensity and gain insights into how the distribution of conflicts evolves over time. This approach helps in understanding temporal patterns and hotspots, offering a more detailed perspective on conflict dynamics.

For quarterly KDE layers:

-   Subset data by quarter and compute KDE for each subset using `spatstat`

::: callout-note
## Note on Handling Duplicate Points

**Duplicate points are removed in the analysis to avoid artificially inflating the density estimate.** Including duplicates could lead to an exaggerated representation of conflict hotspots, as each duplicate would incorrectly suggest multiple occurrences of the same event. By removing duplicates, we ensure that the Kernel Density Estimation (KDE) reflects the true intensity and distribution of distinct armed conflict events, providing a more accurate and reliable identification of hotspots.
:::

### 1. Create a list to store KDE for each quarter

```{r}
kde_list <- list()
```

### 2. Get Unique Quarters

```{r}
quarters <- unique(conflict_acled_sf_data$quarter)
```

### 3. Perform Kernel Density Estimation (KDE)

```{r}
#| eval: true

boundary_window <- as.owin(national_boundaries)

# Loop over each quarter to process data
for (q in quarters) {
  
  # Filter the dataset for the current quarter
  quarter_data <- conflict_acled_sf_data %>%
    filter(quarter == q)
  
  # Remove duplicates
  coords <- st_coordinates(st_geometry(quarter_data))
  if (any(duplicated(coords))) {
    quarter_data <- quarter_data %>%
      distinct(st_coordinates(st_geometry(.)), .keep_all = TRUE)
  }
  
  # Convert the filtered data to a spatial point pattern (ppp object)
  quarter_ppp <- as.ppp(st_geometry(quarter_data), W = boundary_window)
  
  # Perform Kernel Density Estimation (KDE)
  kde <- density(quarter_ppp, sigma = 0.1)  # Adjust sigma as needed for smoothness
  
  # Store KDE in the list
  kde_list[[q]] <- kde
}
```

### 4. Plot the KDE for Each Quarter

```{r}
#| eval: true
#| fig-width: 10
#| fig-height: 20
par(mfcol=c(5, 3))
# Plot the KDEs for all quarters
for (q in quarters) {
  if (!is.null(kde_list[[q]])) {
    plot(kde_list[[q]], main = paste("KDE for", q))
  } else {
    print(paste("No KDE available for quarter:", q))
  }
}
```

# 3.0 Performing 2nd-Order Spatial Point Patterns Analysis

Now, we will explore how armed conflict events are distributed and related.

**Ripley’s K-function** is a useful tool for detecting whether events are clustered or spread out. It measures how the density of events changes with distance, helping to identify clustering or dispersion.

**Whereas G-Function** examine the nearest-neighbor distances and understand how far apart the nearest events are.

**F-Function** analyze the distribution of distances from a randomly chosen location to the nearest event

#### **Computing K-Function Estimation**

```{r}
#| eval: true
# Initialize list to store K-function results
kfunction_list <- list()

# Get unique quarters from the dataset
quarters <- unique(conflict_acled_sf_data$quarter)

# Loop over each quarter to compute K-function
for (q in quarters) {
  
  # Filter the dataset for the current quarter
  quarter_data <- conflict_acled_sf_data %>%
    filter(quarter == q)
  
  # Remove duplicates
  coords <- st_coordinates(st_geometry(quarter_data))
  if (any(duplicated(coords))) {
    quarter_data <- quarter_data %>%
      distinct(st_coordinates(st_geometry(.)), .keep_all = TRUE)
  }
  
  # Convert the filtered data to a spatial point pattern (ppp object)
  quarter_ppp <- as.ppp(st_geometry(quarter_data), W = as.owin(national_boundaries))
  
  # Compute the K-function
  kfunction <- Kest(quarter_ppp, correction = "border")
  
  # Store the K-function in the list
  kfunction_list[[q]] <- kfunction
}
```

::: callout-note
## Note

Ripley’s Correction: Provides a more sophisticated adjustment for edge effects by modifying the expected K-function, leading to potentially more accurate results in large areas. Border Correction: Simplifies the adjustment by extending the study area and is less computationally intensive but might be less accurate in areas with significant boundary effects.

We use correction = "border" rather than correction = "Ripley" for our analysis. Our primary goal is to observe the general distribution of conflict hotspots, which will guide more detailed follow-up studies. Given that our focus is on broad patterns rather than precise details, the simpler and less computationally intensive border correction is sufficient. While Ripley's correction offers more accuracy by adjusting for edge effects, it requires more computational resources and time, which we can afford to forego for this preliminary analysis.
:::

#### Plotting K-Function

**Interpretation**:

-   **Above the theoretical line**: Indicates clustering of points.

-   **Below the theoretical line**: Suggests dispersion or regularity.

-   **Close to the line**: Implies a random distribution.

```{r}
#| eval: true
#| fig-width: 10
#| fig-height: 20
par(mfcol=c(5, 3))
# Plot the K-functions for all quarters
for (q in quarters) {
  if (!is.null(kfunction_list[[q]])) {
    # Plot K-function
    plot(kfunction_list[[q]], . -r ~ r, ylab= "K(d)-r", xlab = "d(m)", main = paste("K-function for Quarter", q))
  } else {
    print(paste("No K-function available for quarter:", q))
  }
}
```

# 4.0 Deriving Quarterly spatio-temporal KDE layers

```{r}
# Define the output directory for saving KDE plots
output_dir <- "quarterly_kde_images"
dir.create(output_dir, showWarnings = FALSE)

# Define a list to hold filenames of saved KDE plots
saved_files <- list()

# Define a function to create and save KDE plots for each quarter
save_kde_plot <- function(kde, quarter, output_dir) {
  # Create a file path for the KDE image
  file_name <- file.path(output_dir, paste0("quarterly_kde_", gsub(" ", "_", quarter), ".png"))
  
  # Open a PNG device to save the plot
  png(file_name, width = 800, height = 800)
  
  # Plot KDE
  plot(kde, main = paste("Spatio-Temporal KDE for", quarter))
  
  # Close the PNG device
  dev.off()
  
  # Print confirmation message
  print(paste("Saved:", file_name))
  
  # Return the filename of the saved plot
  return(file_name)
}

# Generate and save KDE plots for each quarter in reverse chronological order
for (q in rev(quarters)) {
  if (!is.null(kde_list[[q]])) {
    file_name <- save_kde_plot(kde_list[[q]], q, output_dir)
    saved_files <- append(saved_files, file_name)
  } else {
    print(paste("No KDE data available for quarter:", q))
  }
}

```

```{r}
# Load saved images and combine them into an animated GIF
images <- lapply(saved_files, image_read)

# Create an animation from the KDE images
animation <- image_animate(image_join(images), fps = 1)

# Define the path for the GIF animation
gif_path <- "spatio_temporal_kde_animation.gif"

# Save the animation as a GIF file
image_write(animation, path = gif_path)

# Print confirmation that the GIF was saved
print("Spatio-temporal KDE animation saved as spatio_temporal_kde_animation.gif")

# Display the GIF using magick
gif_image <- image_read(gif_path)
print(gif_image) 
```

# 5.0 Performing 2nd-Order Spatio-temporal Point Patterns

```{r}
# Define the output directory for saving K-function plots
kfunction_output_dir <- "quarterly_kfunction_images"
dir.create(kfunction_output_dir, showWarnings = FALSE)

# Define a list to hold filenames of saved K-function plots
kfunction_files <- list()

# Define a function to create and save K-function plots for each quarter
save_kfunction_plot <- function(kfunction, quarter, output_dir) {
  # Create a file path for the K-function image
  file_name <- file.path(output_dir, paste0("quarterly_kfunction_", gsub(" ", "_", quarter), ".png"))
  
  # Open a PNG device to save the plot
  png(file_name, width = 800, height = 800)
  
  # Plot K-function
  plot(kfunction, . -r ~ r, ylab = "K(d) - d", xlab = "d (m)", main = paste("Ripley's K-function for Quarter", quarter))
  
  # Close the PNG device
  dev.off()
  
  # Print confirmation message
  print(paste("Saved:", file_name))
  
  # Return the filename of the saved plot
  return(file_name)
}

# Save K-function plots for each quarter
for (q in rev(quarters)) {
  if (!is.null(kfunction_list[[q]])) {
    file_name <- save_kfunction_plot(kfunction_list[[q]], q, kfunction_output_dir)
    kfunction_files <- append(kfunction_files, file_name)
  } else {
    print(paste("No K-function data available for quarter:", q))
  }
}
```

```{r}
# Load saved images and combine them into an animated GIF
kfunction_images <- lapply(kfunction_files, image_read)

# Create an animation from the K-function images
kfunction_animation <- image_animate(image_join(kfunction_images), fps = 1)

# Define the path for the GIF animation
kfunction_gif_path <- "spatio_temporal_kfunction_animation.gif"

# Save the animation as a GIF file
image_write(kfunction_animation, path = kfunction_gif_path)

# Print confirmation that the GIF was saved
print("Ripley's K-function animation saved as spatio_temporal_kfunction_animation.gif")

# Display the GIF using magick
kfunction_gif_image <- image_read(kfunction_gif_path)
print(kfunction_gif_image)
```

<br/><br/>

# 6.0 Analysis using Openstreetmap of Myanmar

We can make use of OpenStreetMap(OSM) data to create a vivid picture of how armed conflict affects not just the landscape but also the lives and infrastructure essential for the population. From identifying hotspots to understanding the disruption of critical services, here’s how we can delve deeper into the conflict’s impact.

### 6.1 Download OSM Data

::: panel-tabset
```{r}
#| eval: false

# Define list of states in Myanmar
states <- c("Ayeyarwady", "Bago", "Kachin", "Kayah", "Kayin", 
            "Magway", "Mandalay", "Mon", "Rakhine", "Shan", "Tanintharyi", "Yangon")

# Define amenities to retrieve
amenities <- c("hospital", "school", "police", "fire_station", "pharmacy")

# Initialize empty lists to store data
all_amenities <- list()
all_roads <- list()

# Loop through each state
for (state in states) {
  # Define bounding box for each state
  bbox <- getbb(state)
  
  # Initialize an empty list to store amenities data for the current state
  state_amenities <- list()
  
  # Loop through each amenity and retrieve the data
  for (amenity in amenities) {
    query <- opq(bbox = bbox) %>%
             add_osm_feature(key = "amenity", value = amenity)
    amenity_data <- osmdata_sf(query)
    state_amenities[[amenity]] <- amenity_data$osm_points  # Store points
  }
  
  # Combine all amenities into one spatial object for the current state
  state_amenities_sf <- bind_rows(state_amenities)
  state_amenities_sf <- state_amenities_sf[!is.na(state_amenities_sf$amenity), ]
  
  # Download road data for the current state
  roads_query <- opq(bbox = bbox, timeout = 180) %>%
                 add_osm_feature(key = "highway", value = "primary")
  roads_data <- osmdata_sf(roads_query)
  
  # Store data in lists
  all_amenities[[state]] <- state_amenities_sf
  all_roads[[state]] <- roads_data$osm_lines
  
  # Save the data to files if needed
  write_rds(state_amenities_sf, paste0("data/rds/", tolower(state), "_amenities.rds"))
  write_rds(roads_data, paste0("data/rds/", tolower(state), "_roads.rds"))
}
```
:::

::: panel-tabset
## Mapping Conflict Hotspots and Assessing Infrastructure Risks

Conflicts are rarely isolated events. They often impact critical infrastructures such as roads, hospitals, and schools. By mapping these infrastructures and overlaying conflict event data, we can identify areas at risk and evaluate the potential disruption to civilian services.

-   **Proximity Analysis to Critical Infrastructure:**\
    Using OSM, we can pinpoint key infrastructure locations. For instance, if we map hospitals and schools across conflict-affected regions, we can then measure how close these events are to such critical points. This helps us identify high-risk zones where services are most likely to be disrupted, putting civilian lives and wellbeing at immediate risk.

-   **Assessing Road and Transportation Disruption:**\
    Roads are the lifelines that connect people to essential services and humanitarian aid. By mapping major highways and railways, we can overlay conflict data to see which routes are most affected. Visualizing these disrupted routes can highlight areas where civilian movement is restricted, potentially hindering access to safety or relief.

```{r}
conflict_acled_sf_data <- read_rds("data/rds/conflict_acled_sf_data.rds")
```

```{r}
#| fig-width: 10
#| fig-height: 20
tmap_mode("plot")

# List of all states in Myanmar
states <- c("Ayeyarwady", "Kayah", "Kayin", 
            "Magway", "Rakhine", "Tanintharyi", "Yangon")

# Initialize an empty list to store the maps
maps <- list()

# Loop through each state to create maps
for (state in states) {
  # Construct file paths for roads and amenities data
  road_data_path <- paste0("data/rds/", tolower(state), "_roads.rds")
  amenity_data_path <- paste0("data/rds/", tolower(state), "_amenities.rds")
  
  # Check if the files exist before reading
  if (file.exists(road_data_path) && file.exists(amenity_data_path)) {
    # Read road and amenities data for the current state
    roads <- read_rds(road_data_path)
    amenities <- read_rds(amenity_data_path)
    
    # Check that the road and amenities data have valid geometry
    if (!is.null(roads$osm_lines) && !is.null(amenities)) {
      roads_sf <- roads$osm_lines
      amenities_sf <- amenities
      
      # Set conflict dot size based on the state
      conflict_dot_size <- ifelse(state %in% c("Ayeyarwady", "Magway"), 0.01, 0.1)
      
      # Create the map for the current state
      state_map <- tm_shape(roads_sf) +
        tm_lines(col = "gray", lwd = 0.5) +  # Add lines for roads
        tm_shape(amenities_sf) +  
        tm_symbols(col = "amenity", size = 0.01, shape = 21,
                   palette = c("yellow", "blue", "green", "orange", "purple"),
                   title.col = "Amenity Type") +  # Color by amenity type
        tm_shape(conflict_acled_sf_data) +  # Ensure this is defined correctly
        tm_symbols(size = conflict_dot_size, col = "red", shape = 3, style = "cont") +
        tm_layout(title = paste("Key Amenities and Conflict Events in", state),
                  title.position = c("center", "top"),
                  legend.text.size = 0.8,
                  legend.title.size = 1.0,
                  title.size = 1.0,
                  title.color = "black",
                  legend.position = c("right", "bottom"))
      
      # Store the map in the list
      maps[[state]] <- state_map
    } else {
      warning(paste("Invalid or empty data for state:", state))
    }
  } else {
    warning(paste("Files not found for state:", state))
  }
}

if (length(maps) > 0) {
  # Arrange and display all maps in a grid format
  do.call(tmap_arrange, c(maps, list(ncol = 2)))
} else {
  warning("No maps available to display.")
}

```

::: callout-note
Notably, conflict events tend to be concentrated around major road networks, indicating potential hotspots of unrest and activity.
:::
:::

# Learnings/Reflections

::: panel-tabset
## Learnings

-   **Importance of Data Storage**: To speed up my project, I used the `write_rds` method to save downloaded files, especially from OpenStreetMap (OSM). This helps me avoid repeated downloads.

-   **Choosing Visualization Tools**: I found that `tmap` is easier for users to understand when visualizing maps compared to `ggplot2`, which can be more complex, especially for global views.

-   **KDE Selection**: The choice of bandwidth for Kernel Density Estimation (KDE) depends on the specific needs of the analysis.

## Reflections

This exercise has been both insightful and challenging. I tried various plotting methods, experiencing both successes and failures. Some results met my expectations, while others revealed new insights that encouraged me to dig deeper.

I've not only improved my technical skills but also gained a greater understanding of the ethical aspects of data representation. Each map I create tells a story of resilience and struggle. Merging data, cleaning it, and presenting it with `ggplot2` and `tmap` has shown me how important it is to communicate clearly and accurately.
:::
